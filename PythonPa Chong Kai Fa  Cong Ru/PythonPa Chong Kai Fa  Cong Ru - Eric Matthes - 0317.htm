<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:12pt Arial, sans-serif; }
 .font3 { font:10pt Segoe UI, sans-serif; }
 .font4 { font:8pt SimHei, sans-serif; }
 .font5 { font:12pt SimHei, sans-serif; }
 .font6 { font:8pt SimSun, serif; }
 .font7 { font:10pt SimSun, serif; }
 .font8 { font:9pt Times New Roman, serif; }
 .font9 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font9">300</span></p>
<p><span class="font7">第</span><span class="font9">15</span><span class="font7">章 生成数据</span></p>
<p><span class="font7">在。处，我们使用了</span><span class="font3">range()</span><span class="font7">生成了一个数字列表，其中包含的数字个数与漫步包含的点数相 同。接下来，我们将这个列表存储在</span><span class="font3">point_numbers</span><span class="font7">中，以便后面使用它来设置每个漫步点的颜 色。我们将参数</span><span class="font3">c</span><span class="font7">设置为</span><span class="font3">point_numbers</span><span class="font7">，指定使用颜色映射</span><span class="font3">Blues</span><span class="font7">，并传递实参</span><span class="font3">edgecolor=none</span><span class="font7">以 删除每个点周围的轮廓。最终的随机漫步图从浅蓝色渐变为深蓝色，如图</span><span class="font9">15-9</span><span class="font7">所示。</span></p><img src="PythonPa Chong Kai Fa  Cong Ru - Eric Matthes - 0317_files/PythonPa20Chong20Kai20Fa2020Cong20Ru20-20Eric20Matthes20-200317-1.jpg" alt="" style="width:340pt;height:212pt;">
<p><span class="font4">图</span><span class="font8">15-9</span><span class="font4">使用颜色映射</span><span class="font0">Blues</span><span class="font4">着色的随机漫步图</span></p>
<ul style="list-style:none;"><li>
<p><span class="font2">15.3.7</span><span class="font5"> 重新绘制起点和终点</span></p></li></ul>
<p><span class="font7">除了给随机漫步的各个点着色，以指出它们的先后顺序外，如果还能呈现随机漫步的起点和 终点就更好了。为此，可在绘制随机漫步图后重新绘制起点和终点。我们让起点和终点变得更大， 并显示为不同的颜色，以突出它们，如下所示：</span></p>
<p><span class="font1">rw_visual.py</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">--</span><span class="font0" style="font-style:italic;">snip</span><span class="font0">-</span></p></li></ul>
<p><span class="font0">while True:</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">- -</span><span class="font0" style="font-style:italic;">snip</span><span class="font0">--</span></p></li></ul>
<p><span class="font0">plt.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, edgecolor='none', s=15)</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font6"> 突出起点和终点</span></p></li></ul>
<p><span class="font0">plt.scatter(0, 0, c='green', edgecolors='none', s=100)</span></p>
<p><span class="font0">plt.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolors='none', s=100)</span></p>
<p><span class="font0">plt.show()</span></p>
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
</body>
</html>