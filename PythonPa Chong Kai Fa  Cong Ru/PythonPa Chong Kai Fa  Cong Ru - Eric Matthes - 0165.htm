<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Calibri, sans-serif; }
 .font2 { font:10pt Segoe UI, sans-serif; }
 .font3 { font:7pt SimHei, sans-serif; }
 .font4 { font:8pt SimSun, serif; }
 .font5 { font:9pt SimSun, serif; }
 .font6 { font:10pt SimSun, serif; }
 .font7 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font7">148</span></p>
<p><span class="font6">第</span><span class="font7">9</span><span class="font6">章 类</span></p>
<p><span class="font0">self.year = year</span></p>
<p><span class="font0">self.odometer_reading = 0</span></p>
<p><span class="font0">def get_descriptive_name(self):</span></p>
<p><span class="font0">long_name = str(self.year) + ' ' + self.make + ' ' + self.model</span></p>
<p><span class="font0">return long_name.title()</span></p>
<p><span class="font0">def read_odometer(self):</span></p>
<p><span class="font0">print(&quot;This car has &quot;&nbsp;+ str(self.odometer_reading) + &quot;&nbsp;miles on it.&quot;)</span></p>
<p><span class="font0">def update_odometer(self, mileage):</span></p>
<p><span class="font0">if mileage &gt;= self.odometer_reading:</span></p>
<p><span class="font0">self.odometer_reading = mileage</span></p>
<p><span class="font0">else:</span></p>
<p><span class="font0">print(&quot;You can't roll back an odometer!&quot;)</span></p>
<p><span class="font0">def increment_odometer(self, miles):</span></p>
<p><span class="font0">self.odometer_reading += miles</span></p>
<p><span class="font3">❷ </span><span class="font0">class ElectricCar(Car):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font4">电动汽车的独特之处</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font3">❸ </span><span class="font0">def ―init—(self, make, model, year):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font4">初始化父类的属性</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font3">❹ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">super().—init—(make, model, year)</span></p>
<p><span class="font3">❺ </span><span class="font0">my_tesla = ElectricCar('tesla', 'model s', 2016)</span></p>
<p><span class="font0">print(my_tesla.get_descriptive_name())</span></p>
<p><span class="font6">首先是</span><span class="font2">Car</span><span class="font6">类的代码(见</span><span class="font1">O</span><span class="font6">)。创建子类时，父类必须包含在当前文件中，且位于子类前面。 在</span><span class="font1">❷</span><span class="font6">处，我们定义了子类</span><span class="font2">ElectricCar</span><span class="font6">。定义子类时，必须在括号内指定父类的名称。方法</span><span class="font2">_init_() </span><span class="font6">接受创建</span><span class="font2">Car</span><span class="font6">实例所需的信息(见</span><span class="font1">❸</span><span class="font6">)。</span></p>
<p><span class="font1">❹</span><span class="font6">处的</span><span class="font2">super()</span><span class="font6">是一个特殊函数，帮助</span><span class="font7">Python</span><span class="font6">将父类和子类关联起来。这行代码让</span><span class="font7">Python</span><span class="font6">调用 </span><span class="font2">ElectricCar</span><span class="font6">的父类的方法</span><span class="font2">_init__()</span><span class="font6">，让</span><span class="font2">ElectricCar</span><span class="font6">实例包含父类的所有属性。父类也称为</span><span class="font5">超 类</span><span class="font6">(</span><span class="font7">superclass</span><span class="font6">)，名称</span><span class="font7">super</span><span class="font6">因此而得名。</span></p>
<p><span class="font6">为测试继承是否能够正确地发挥作用，我们尝试创建一辆电动汽车，但提供的信息与创建普 通汽车时相同。在</span><span class="font1">❺</span><span class="font6">处，我们创建</span><span class="font2">ElectricCar</span><span class="font6">类的一个实例，并将其存储在变量</span><span class="font2">my_tesla</span><span class="font6">中。这 行代码调用</span><span class="font2">ElectricCar</span><span class="font6">类中定义的方法</span><span class="font2">_init__()</span><span class="font6">，后者让</span><span class="font7">Python</span><span class="font6">调用父类</span><span class="font2">Car</span><span class="font6">中定义的方法 </span><span class="font2">__init__()</span><span class="font6">。我们提供了实参</span><span class="font2">'tesla'</span><span class="font6">、</span><span class="font2">'model s'</span><span class="font6">和</span><span class="font2">2016</span><span class="font6">。</span></p>
<p><span class="font6">除方法</span><span class="font2">__init__()</span><span class="font6">外，电动汽车没有其他特有的属性和方法。当前，我们只想确认电动汽车 具备普通汽车的行为：</span></p>
<p><span class="font0">2016 Tesla Model S</span></p>
<p><span class="font2">ElectricCar</span><span class="font6">实例的行为与</span><span class="font2">Car</span><span class="font6">实例一样，现在可以开始定义电动汽车特有的属性和方法了。</span></p>
<div>
</div><br clear="all">
</body>
</html>