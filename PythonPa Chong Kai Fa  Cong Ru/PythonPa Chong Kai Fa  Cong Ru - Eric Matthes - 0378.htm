<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:12pt Arial, sans-serif; }
 .font3 { font:10pt Segoe UI, sans-serif; }
 .font4 { font:7pt SimHei, sans-serif; }
 .font5 { font:10pt SimHei, sans-serif; }
 .font6 { font:8pt SimSun, serif; }
 .font7 { font:9pt SimSun, serif; }
 .font8 { font:10pt SimSun, serif; }
 .font9 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font9">18.2 </span><span class="font8">创建应用程序</span></p>
<p><span class="font9">361</span></p>
<p><span class="font1">models.py</span></p>
<p><span class="font0">from django.db import models</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0"># </span><span class="font6">在这里创建模型</span></p></li></ul>
<p><span class="font8">这为我们导入了模块</span><span class="font9">models</span><span class="font8">,还让我们创建自己的模型。模型告诉</span><span class="font9">Django</span><span class="font8">如何处理应用程序 中存储的数据。在代码层面，模型就是一个类，就像前面讨论的每个类一样，包含属性和方法。 下面是表示用户将要存储的主题的模型：</span></p>
<p><span class="font0">from django.db import models</span></p>
<p><span class="font0">class Topic(models.Model):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font6">用户学习的主题</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font4">❶ &nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">text = models.CharField(max_length=200</span><span class="font7">)</span></p>
<p><span class="font4">❷ &nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">date_added = models.DateTimeField(auto_now_add=True)</span></p>
<p><span class="font4">❸ &nbsp;&nbsp;&nbsp;</span><span class="font0">def —str—(self):</span></p>
<p><span class="font0">&quot;&quot;’</span><span class="font6">返回模型的字符串表示&quot;‘''</span></p>
<p><span class="font0">return self.text</span></p>
<p><span class="font8">我们创建了一个名为</span><span class="font3">Topic</span><span class="font8">的类，它继承了</span><span class="font3">Model——</span><span class="font9">Django</span><span class="font8">中一个定义了模型基本功能的 类。</span><span class="font3">Topic</span><span class="font8">类只有两个属性：</span><span class="font3">text</span><span class="font8">和</span><span class="font3">date_added</span><span class="font8">。</span></p>
<p><span class="font8">属性</span><span class="font3">text</span><span class="font8">是一个</span><span class="font3">CharField——</span><span class="font8">由字符或文本组成的数据(见</span><span class="font5">❶</span><span class="font8">)。需要存储少量的文本，如 名称、标题或城市时，可使用</span><span class="font3">CharField</span><span class="font8">。定义</span><span class="font3">CharField</span><span class="font8">属性时，必须告诉</span><span class="font9">Django</span><span class="font8">该在数据库中 预留多少空间。在这里，我们将</span><span class="font3">max_length</span><span class="font8">设置成了</span><span class="font9">200</span><span class="font8">(即</span><span class="font9">200</span><span class="font8">个字符)，这对存储大多数主题 名来说足够了。</span></p>
<p><span class="font8">属性</span><span class="font3">date_added</span><span class="font8">是一个</span><span class="font3">DateTimeField——</span><span class="font8">记录日期和时间的数据(见</span><span class="font5">❷</span><span class="font8">)。我们传递了实参 </span><span class="font3">auto_add_now=True</span><span class="font8">，每当用户创建新主题时，这都让</span><span class="font9">Django</span><span class="font8">将这个属性自动设置成当前日期和 时间。</span></p>
<p><span class="font5">注意 </span><span class="font7">要获悉可在模型中使用的各种字段，请参阅</span><span class="font9">Django Model Field Reference </span><span class="font7">(</span><span class="font9">Django</span><span class="font7">模型字 段参考),其网址为</span><a href="https://docs.djangoproject.eom/en/1.8/ref/models/fields/%e3%80%82%e5%b0%b1%e5%bd%93%e5%89%8d%e8%80%8c%e8%a8%80%ef%bc%8c"><span class="font9">https://docs.djangoproject.eom/en/1.8/ref/models/fields/</span><span class="font7">。就当前而言，</span></a><span class="font7"> 你无需全面了解其中的所有内容，但自己开发应用程序时，这些内容会提供极大的帮助。</span></p>
<p><span class="font8">我们需要告诉</span><span class="font9">Django</span><span class="font8">，默认应使用哪个属性来显示有关主题的信息。</span><span class="font9">Django</span><span class="font8">调用方法 </span><span class="font3">_str__</span><span class="font8">。来显示模型的简单表示。在这里，我们编写了方法</span><span class="font3">_str__()</span><span class="font8">，它返回存储在属性</span><span class="font3">text </span><span class="font8">中的字符串(见</span><span class="font5">❸</span><span class="font8">)。</span></p>
<div>
<p><span class="font2" style="font-weight:bold;">18</span></p>
</div><br clear="all">
<p><span class="font5">注意 </span><span class="font7">如果你使用的是</span><span class="font9">Python 2.7</span><span class="font7">，应调用方法—</span><span class="font3">unicode—()</span><span class="font7">，而不是一</span><span class="font3">str—()</span><span class="font7">，但其中的代 码相同。</span></p>
</body>
</html>