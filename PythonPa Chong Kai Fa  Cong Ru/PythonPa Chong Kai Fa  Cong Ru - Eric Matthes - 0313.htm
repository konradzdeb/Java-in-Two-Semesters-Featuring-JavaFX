<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:11pt Arial, sans-serif; }
 .font3 { font:12pt Arial, sans-serif; }
 .font4 { font:10pt Segoe UI, sans-serif; }
 .font5 { font:7pt SimHei, sans-serif; }
 .font6 { font:10pt SimHei, sans-serif; }
 .font7 { font:12pt SimHei, sans-serif; }
 .font8 { font:8pt SimSun, serif; }
 .font9 { font:9pt SimSun, serif; }
 .font10 { font:10pt SimSun, serif; }
 .font11 { font:10pt Times New Roman, serif; }
 .font12 { font:11pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font11">296 </span><span class="font10">第</span><span class="font11">15</span><span class="font10">章 生成数据</span></p>
<p><span class="font10">次都沿随机的方向前行所经过的路径。</span></p>
<p><span class="font10">在自然界、物理学、生物学、化学和经济领域，随机漫步都有其实际用途。例如，漂浮在水 滴上的花粉因不断受到水分子的挤压而在水面上移动。水滴中的分子运动是随机的，因此花粉在 水面上的运动路径犹如随机漫步。我们稍后将编写的代码模拟了现实世界的很多情形。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font3">15.3.1</span><span class="font7"> 创建 </span><span class="font2">RandomWalk()</span><span class="font7">类</span></p></li></ul>
<p><span class="font10">为模拟随机漫步，我们将创建一个名为</span><span class="font4">RandomWalk</span><span class="font10">的类，它随机地选择前进方向。这个类需 要三个属性，其中一个是存储随机漫步次数的变量，其他两个是列表，分别存储随机漫步经过的 每个点的</span><span class="font11" style="font-style:italic;">x</span><span class="font10">和</span><span class="font11" style="font-style:italic;">^</span><span class="font10">坐标。</span></p>
<p><span class="font4">RandomWalk</span><span class="font10">类只包含两个方法：</span><span class="font4">_init__ ()</span><span class="font10">和</span><span class="font4">fill_walk()</span><span class="font10">，其中后者计算随机漫步经过的所 有点。下面先来看看</span><span class="font4">__init__()</span><span class="font10">，如下所示：</span></p>
<p><span class="font1">random_walk.py</span></p>
<p><span class="font5">❶ </span><span class="font0">from random import choice</span></p>
<p><span class="font0">class RandomWalk():</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font8">一个生成随机漫步数据的类</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font5">❷ &nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">def —init—(self, num_points=5000</span><span class="font9">)</span><span class="font0">:</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font8">初始化随机漫步的属性</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font0">self.num_points = num_points</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0"># </span><span class="font8">所有随机漫步都始于</span><span class="font0">(0, 0)</span></p></li></ul>
<p><span class="font5">❸ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">self.x_values = [0]</span></p>
<p><span class="font0">self.y_values = [0]</span></p>
<p><span class="font10">为做出随机决策，我们将所有可能的选择都存储在一个列表中，并在每次做决策时都使用 </span><span class="font4">choice</span><span class="font10">。来决定使用哪种选择(见</span><span class="font12" style="font-weight:bold;">0</span><span class="font6">)。</span><span class="font10">接下来，我们将随机漫步包含的默认点数设置为</span><span class="font11">5000</span><span class="font10">，这 大到足以生成有趣的模式，同时又足够小，可确保能够快速地模拟随机漫步(见</span><span class="font6">❷</span><span class="font10">)。然后，在 </span><span class="font6">❸</span><span class="font10">处，我们创建了两个用于存储</span><span class="font11" style="font-style:italic;">x</span><span class="font10">和</span><span class="font11" style="font-style:italic;">y</span><span class="font10">值的列表，并让每次漫步都从点</span><span class="font11">(0, 0)</span><span class="font10">出发。</span></p>
<ul style="list-style:none;"><li><a name="caption1"></a>
<h5><a name="bookmark0"></a><span class="font3"><a name="bookmark1"></a>15.3.2</span><span class="font7"> 选择方向</span></h5></li></ul>
<p><span class="font10">我们将使用</span><span class="font4">fill_walk()</span><span class="font10">来生成漫步包含的点，并决定每次漫步的方向，如下所示。请将这 个方法添加至</span><span class="font11">Urandom_walk.py</span><span class="font10">中：</span></p>
<p><span class="font1">random_walk.py</span></p>
<p><span class="font0">def fill_walk(self):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font8">计算随机漫步包含的所有点</span><span class="font0">&quot;&quot;&quot; # </span><span class="font8">不断漫步，直到列表达到指定的长度</span></p>
<p><span class="font0">while len(self.x_values) &lt;&nbsp;self.num_points:</span></p>
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
</body>
</html>