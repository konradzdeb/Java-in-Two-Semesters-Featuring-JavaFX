<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:9pt Arial, sans-serif; }
 .font2 { font:10pt Arial, sans-serif; }
 .font3 { font:11pt Arial, sans-serif; }
 .font4 { font:12pt Arial, sans-serif; }
 .font5 { font:10pt Segoe UI, sans-serif; }
 .font6 { font:7pt SimHei, sans-serif; }
 .font7 { font:10pt SimHei, sans-serif; }
 .font8 { font:12pt SimHei, sans-serif; }
 .font9 { font:8pt SimSun, serif; }
 .font10 { font:9pt SimSun, serif; }
 .font11 { font:10pt SimSun, serif; }
 .font12 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font12">212</span></p>
<p><span class="font11">第</span><span class="font12">12</span><span class="font11">章 武装飞船</span></p>
<ul style="list-style:none;"><li>
<p><span class="font4">12.4.1</span><span class="font8"> 创建 </span><span class="font3">Ship </span><span class="font8">类</span></p></li></ul>
<p><span class="font11">选择用于表示飞船的图像后，需要将其显示到屏幕上。我们将创建一个名为</span><span class="font5">ship</span><span class="font11">的模块，其 中包含</span><span class="font5">Ship</span><span class="font11">类，它负责管理飞船的大部分行为。</span></p>
<p><span class="font2">ship.py</span></p>
<p><span class="font0">import pygame</span></p>
<p><span class="font0">class Ship():</span></p>
<p><span class="font0">def __init__(self, screen):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font9">初始化飞船并设置其初始位置</span><span class="font0">&quot;&quot;&quot; self.screen = screen</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font9"> 加载飞船图像并获取其外接矩形</span></p></li></ul>
<p><span class="font6">❶ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">self.image = pygame.image.load('images/ship.bmp')</span></p>
<p><span class="font6">❷ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">self.rect = self.image.get_rect()</span></p>
<p><span class="font6">❸ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">self.screen_rect = screen.get_rect()</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font9"> 将每艘新飞船放在屏幕底部中央</span></p></li></ul>
<p><span class="font6">❹ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">self.rect.centerx = self.screen_rect.centerx</span></p>
<p><span class="font0">self.rect.bottom = self.screen_rect.bottom</span></p>
<p><span class="font6">❺ </span><span class="font0">def blitme(self):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font9">在指定位置绘制飞船</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font0">self.screen.blit(self.image, self.rect)</span></p>
<p><span class="font11">首先，我们导入了模块</span><span class="font5">pygame</span><span class="font11">。</span><span class="font5">Ship</span><span class="font11">的方法</span><span class="font5">_init__()</span><span class="font11">接受两个参数：引用</span><span class="font5">self</span><span class="font11">和</span><span class="font5">screen</span><span class="font11">， 其中后者指定了要将飞船绘制到什么地方。为加载图像，我们调用了 </span><span class="font5">pygame.image.load()(</span><span class="font11">见</span><span class="font7">❶</span><span class="font11">)。 这个函数返回一个表示飞船的</span><span class="font12">surface</span><span class="font11">，而我们将这个</span><span class="font12">surface</span><span class="font11">存储到了 </span><span class="font5">self.image</span><span class="font11">中。</span></p>
<p><span class="font11">加载图像后，我们使用</span><span class="font5">get_rect</span><span class="font11">。获取相应</span><span class="font12">surface</span><span class="font11">的属性</span><span class="font5">rect </span><span class="font11">(见</span><span class="font7">❷</span><span class="font11">)。</span><span class="font12">Pygame</span><span class="font11">的效率之所以 如此高，一个原因是它让你能够像处理矩形(</span><span class="font5">rect</span><span class="font11">对象)一样处理游戏元素，即便它们的形状并 非矩形。像处理矩形一样处理游戏元素之所以高效，是因为矩形是简单的几何形状。这种做法的 效果通常很好，游戏玩家几乎注意不到我们处理的不是游戏元素的实际形状。</span></p>
<p><span class="font11">处理</span><span class="font5">rect</span><span class="font11">对象时，可使用矩形四角和中心的</span><span class="font12" style="font-style:italic;">x</span><span class="font11">和</span><span class="font12" style="font-style:italic;">y</span><span class="font11">坐标。可通过设置这些值来指定矩形的位置。</span></p>
<p><span class="font11">要将游戏元素居中，可设置相应</span><span class="font5">rect</span><span class="font11">对象的属性</span><span class="font5">center</span><span class="font11">、</span><span class="font5">centerx</span><span class="font11">或</span><span class="font5">centery</span><span class="font11">。要让游戏元素 与屏幕边缘对齐，可使用属性</span><span class="font5">top</span><span class="font11">、</span><span class="font5">bottom</span><span class="font11">、</span><span class="font5">left</span><span class="font11">或</span><span class="font5">right</span><span class="font11">；要调整游戏元素的水平或垂直位置， 可使用属性</span><span class="font5">x</span><span class="font11">和</span><span class="font5">y</span><span class="font11">，它们分别是相应矩形左上角的</span><span class="font12" style="font-style:italic;">x</span><span class="font11">和</span><span class="font12" style="font-style:italic;">y</span><span class="font11">坐标。这些属性让你无需去做游戏开发人员 原本需要手工完成的计算，你经常会用到这些属性。</span></p>
<p><span class="font7">注意 </span><span class="font10">在</span><span class="font12">Pygame</span><span class="font10">中，原点</span><span class="font12">(0, 0)</span><span class="font10">位于屏幕左上角，向右下方移动时，坐标值将增大。在</span><span class="font12">1200</span><span class="font1">x</span><span class="font12">800 </span><span class="font10">的屏幕上，原点位于左上角，而右下角的坐标为</span><span class="font12">(1200, 800)</span><span class="font10">。</span></p>
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
</body>
</html>