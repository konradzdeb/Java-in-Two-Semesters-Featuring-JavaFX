<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:12pt Arial, sans-serif; }
 .font3 { font:10pt Segoe UI, sans-serif; }
 .font4 { font:7pt SimHei, sans-serif; }
 .font5 { font:8pt SimHei, sans-serif; }
 .font6 { font:10pt SimHei, sans-serif; }
 .font7 { font:8pt SimSun, serif; }
 .font8 { font:9pt SimSun, serif; }
 .font9 { font:10pt SimSun, serif; }
 .font10 { font:10pt Times New Roman, serif; }
 .font11 { font:11pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font10">11.1 </span><span class="font9">测试函数</span></p>
<p><span class="font10">189</span></p>
<p><span class="font9">继承</span><span class="font3">unittest.TestCase</span><span class="font9">的类，并编写一系列方法对函数行为的不同方面进行测试。</span></p>
<p><span class="font9">下面是一个只包含一个方法的测试用例，它检查函数</span><span class="font3">get_formatted_name</span><span class="font9">。在给定名和姓时 能否正确地工作：</span></p>
<p><span class="font1">test_name_ function.py</span></p>
<p><span class="font0">import unittest</span></p>
<p><span class="font0">from name_function import get_formatted_name</span></p>
<p><span class="font4">❶ </span><span class="font0">class NamesTestCase(unittest.TestCase):</span></p>
<p><span class="font7">......测试 </span><span class="font0">name_function.py......</span></p>
<p><span class="font0">def test_first_last_name(self):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font7">能够正确地处理像</span><span class="font0">33</span><span class="font5">门</span><span class="font0">15 Joplin</span><span class="font7">这样的姓名吗？</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font4">❷ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">formatted_name = get_formatted_name('janis', 'joplin')</span></p>
<p><span class="font4">❸ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">self.assertEqual(formatted_name, 'Janis Joplin')</span></p>
<p><span class="font0">unittest.main()</span></p>
<p><span class="font9">首先，我们导入了模块</span><span class="font3">unittest</span><span class="font9">和要测试的函数</span><span class="font3">get_formatted_ name()</span><span class="font9">。在</span><span class="font11" style="font-weight:bold;">❶</span><span class="font9">处，我们创建 了一个名为</span><span class="font3">NamesTestCase</span><span class="font9">的类，用于包含一系列针对</span><span class="font3">get_formatted_name()</span><span class="font9">的单元测试。你可随 便给这个类命名，但最好让它看起来与要测试的函数相关，并包含字样</span><span class="font10">T</span><span class="font8">。就</span><span class="font9">。这个类必须继承 </span><span class="font3">unittest.TestCase</span><span class="font9">类，这样</span><span class="font10">Python</span><span class="font9">才知道如何运行你编写的测试。</span></p>
<p><span class="font3">NamesTestCase</span><span class="font9">只包含一个方法，用于测试</span><span class="font3">get_formatted_name()</span><span class="font9">的一个方面。我们将这个方 法命名为</span><span class="font3">test_first_last_name()</span><span class="font9">，因为我们要核实的是只有名和姓的姓名能否被正确地格式化。 我们运</span><span class="font10">7ftest_name_function.py</span><span class="font9">时，所有以</span><span class="font3">test_</span><span class="font9">打头的方法都将自动运行。在这个方法中，我们 调用了要测试的函数，并存储了要测试的返回值。在这个示例中，我们使用实参</span><span class="font3">'janis'</span><span class="font9">和</span><span class="font3">'joplin' </span><span class="font9">调用</span><span class="font3">get_formatted_name()</span><span class="font9">，并将结果存储到变量</span><span class="font3">formatted_name</span><span class="font9">中(见</span><span class="font6">❷</span><span class="font9">)。</span></p>
<div>
<p><span class="font2" style="font-weight:bold;">11</span></p>
</div><br clear="all">
<p><span class="font9">在</span><span class="font6">❸</span><span class="font9">处，我们使用了</span><span class="font3">unittest</span><span class="font9">类最有用的功能之一：一个</span><span class="font8">断言</span><span class="font9">方法。断言方法用来核实得到 的结果是否与期望的结果一致。在这里，我们知道</span><span class="font3">get_formatted_name()</span><span class="font9">应返回这样的姓名，即 名和姓的首字母为大写，且它们之间有一个空格，因此我们期望</span><span class="font3">formatted_name</span><span class="font9">的值为</span><span class="font3">Janis Joplin</span><span class="font9">。为检查是否确实如此，我们调用</span><span class="font3">unittest</span><span class="font9">的方法</span><span class="font3">assertEqual()</span><span class="font9">，并向它传递</span><span class="font3">formatted, name</span><span class="font9">和</span><span class="font3">'Janis Joplin'</span><span class="font9">。代码行</span><span class="font3">self.assertEqual(formatted_name, 'Janis Joplin')</span><span class="font9">的意思是说: “将</span><span class="font3">formatted_name</span><span class="font9">的值同字符串</span><span class="font3">‘Janis Joplin'</span><span class="font9">进行比较，如果它们相等，就万事大吉，如果它 们不相等，跟我说一声！”</span></p>
<p><span class="font9">代码行</span><span class="font3">unittest.main()</span><span class="font9">让</span><span class="font10">Python</span><span class="font9">运行这个文件中的测试。运行</span><span class="font10">test_name_function.py</span><span class="font9">时，得 到的输出如下：</span></p>
<p><span class="font0">Ran 1 test in 0.000s</span></p>
<p><span class="font0">OK</span></p>
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
</body>
</html>