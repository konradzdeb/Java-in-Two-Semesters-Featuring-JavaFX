<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:12pt Arial, sans-serif; }
 .font2 { font:10pt Segoe UI, sans-serif; }
 .font3 { font:7pt Segoe UI Symbol, sans-serif; }
 .font4 { font:7pt SimHei, sans-serif; }
 .font5 { font:10pt SimHei, sans-serif; }
 .font6 { font:12pt SimHei, sans-serif; }
 .font7 { font:10pt SimSun, serif; }
 .font8 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font8">78</span></p>
<p><span class="font7">第</span><span class="font8">5</span><span class="font7">章</span><span class="font8">if</span><span class="font7">语句</span></p>
<ul style="list-style:none;"><li>
<p><span class="font1">5.4.2</span><span class="font6"> 确定列表不是空的</span></p></li></ul>
<p><span class="font7">到目前为止，对于处理的每个列表都做了一个简单的假设，即假设它们都至少包含一个元素。 我们马上就要让用户来提供存储在列表中的信息，因此不能再假设循环运行时列表不是空的。有 鉴于此，在运行</span><span class="font2">for</span><span class="font7">循环前确定列表是否为空很重要。</span></p>
<p><span class="font7">下面在制作比萨前检查顾客点的配料列表是否为空。如果列表是空的，就向顾客确认他是否 要点普通比萨；如果列表不为空，就像前面的示例那样制作比萨：</span></p>
<p><span class="font3">❶</span><span class="font4"> </span><span class="font0">requested_toppings = </span><span class="font4">口</span></p>
<p><span class="font3">❷</span><span class="font4"> </span><span class="font0">if requested_toppings:</span></p>
<p><span class="font0">for requested_topping in requested_toppings:</span></p>
<p><span class="font0">print(&quot;Adding &quot;&nbsp;+ requested_topping + &quot;.&quot;)</span></p>
<p><span class="font0">print(&quot;\nFinished making your pizza!&quot;)</span></p>
<p><span class="font3">❸</span><span class="font4"> </span><span class="font0">else:</span></p>
<p><span class="font0">print(&quot;Are you sure you want a plain pizza?&quot;)</span></p>
<p><span class="font7">在这里，我们首先创建了一个空列表，其中不包含任何配料(见</span><span class="font5">❶</span><span class="font7">)。在</span><span class="font5">❷</span><span class="font7">处我们进行了简 单检查，而不是直接执行</span><span class="font2">for</span><span class="font7">循环。在</span><span class="font2">if</span><span class="font7">语句中将列表名用在条件表达式中时，</span><span class="font8">Python</span><span class="font7">将在列表 至少包含一个元素时返回</span><span class="font2">True</span><span class="font7">，并在列表为空时返回</span><span class="font2">False</span><span class="font7">。如果</span><span class="font2">requested_toppings</span><span class="font7">不为空，就 运行与前一个示例相同的</span><span class="font2">for</span><span class="font7">循环；否则，就打印一条消息，询问顾客是否确实要点不加任何配 料的普通比萨(见</span><span class="font5">❸</span><span class="font7">)。</span></p>
<p><span class="font7">在这里，这个列表为空，因此输出如下</span><span class="font8">——</span><span class="font7">询问顾客是否确实要点普通比萨：</span></p>
<p><span class="font0">Are you sure you want a plain pizza?</span></p>
<p><span class="font7">如果这个列表不为空，将显示在比萨中添加的各种配料的输出。</span></p>
<ul style="list-style:none;"><li><a name="caption1"></a>
<h5><a name="bookmark0"></a><span class="font1"><a name="bookmark1"></a>5.4.3</span><span class="font6"> 使用多个列表</span></h5></li></ul>
<p><span class="font7">顾客的要求往往五花八门，在比萨配料方面尤其如此。如果顾客要在比萨中添加炸薯条，该 怎么办呢？可使用列表和</span><span class="font2">if</span><span class="font7">语句来确定能否满足顾客的要求。</span></p>
<p><span class="font7">来看看在制作比萨前如何拒绝怪异的配料要求。下面的示例定义了两个列表，其中第一个列 表包含比萨店供应的配料，而第二个列表包含顾客点的配料。这次对于</span><span class="font2">requested_toppings</span><span class="font7">中的 每个元素，都检查它是否是比萨店供应的配料，再决定是否在比萨中添加它：</span></p>
<p><span class="font3">❶</span><span class="font4"> </span><span class="font0">available_toppings = ['mushrooms', 'olives', 'green peppers', 'pepperoni', 'pineapple', 'extra cheese']</span></p>
<p><span class="font3">❷</span><span class="font4"> </span><span class="font0">requested_toppings = ['mushrooms', 'french fries', 'extra cheese']</span></p>
<p><span class="font3">❸</span><span class="font4"> </span><span class="font0">for requested_topping in requested_toppings:</span></p>
<p><span class="font3">❹ &nbsp;</span><span class="font0">if requested_topping in available_toppings:</span></p>
<p><span class="font0">print(&quot;Adding &quot;&nbsp;+ requested_topping + &quot;.&quot;)</span></p>
<p><span class="font3">❺ &nbsp;</span><span class="font0">else:</span></p>
<p><span class="font0">print(&quot;Sorry, we don't have &quot;&nbsp;+ requested_topping + &quot;.&quot;)</span></p>
</body>
</html>