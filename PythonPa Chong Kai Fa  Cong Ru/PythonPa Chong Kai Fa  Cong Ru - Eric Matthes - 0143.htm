<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:9pt Arial, sans-serif; }
 .font2 { font:10pt Arial, sans-serif; }
 .font3 { font:12pt Arial, sans-serif; }
 .font4 { font:14pt Arial, sans-serif; }
 .font5 { font:10pt Segoe UI, sans-serif; }
 .font6 { font:7pt SimHei, sans-serif; }
 .font7 { font:10pt SimHei, sans-serif; }
 .font8 { font:12pt SimHei, sans-serif; }
 .font9 { font:14pt SimHei, sans-serif; }
 .font10 { font:8pt SimSun, serif; }
 .font11 { font:9pt SimSun, serif; }
 .font12 { font:10pt SimSun, serif; }
 .font13 { font:10pt Times New Roman, serif; }
 .font14 { font:11pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font13">126 </span><span class="font12">第</span><span class="font13">8</span><span class="font12">章 函数</span></p>
<p><span class="font11">用这个函数时指定了歌曲数，就将这个值添加到表示专辑的字典中。调用这个函数，并 至少在一次调用中指定专辑包含的歌曲数。</span></p>
<p><span class="font1">8-8</span><span class="font7">用户的专辑</span><span class="font11">：在为完成练习</span><span class="font13">8-7</span><span class="font11">编写的程序中，编写一个</span><span class="font5">while</span><span class="font11">循环，让用户 输入一个专辑的歌手和名称。获取这些信息后，使用它们来调用函数</span><span class="font5">make_album()</span><span class="font11">,并 将创建的字典打印出来。在这个</span><span class="font5">while</span><span class="font11">循环中，务必要提供退出途径。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font4">8.4 </span><span class="font9">传递列表</span></p></li></ul>
<p><span class="font12">你经常会发现，向函数传递列表很有用，这种列表包含的可能是名字、数字或更复杂的对 象(如字典)。将列表传递给函数后，函数就能直接访问其内容。下面使用函数来提高处理列表 的效率。</span></p>
<p><span class="font12">假设有一个用户列表，我们要问候其中的每位用户。下面的示例将一个名字列表传递给一个 名为</span><span class="font5">greet_users()</span><span class="font12">的函数，这个函数问候列表中的每个人：</span></p>
<p><span class="font2">greet_users.py</span></p>
<p><span class="font0">def greet_users(names):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font10">向列表中的每位用户都发出简单的问候</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font0">for name in names:</span></p>
<p><span class="font0">msg = &quot;Hello, &quot;&nbsp;+ name.title() + &quot;!&quot; print(msg)</span></p>
<p><span class="font6">❶ </span><span class="font0">usernames = ['hannah', 'ty', 'margot']</span></p>
<p><span class="font0">greet_users(usernames)</span></p>
<p><span class="font12">我们将</span><span class="font5">greet_users()</span><span class="font12">定义成接受一个名字列表，并将其存储在形参</span><span class="font5">names</span><span class="font12">中。这个函数遍历收到 的列表，并对其中的每位用户都打印一条问候语。在</span><span class="font14" style="font-weight:bold;">❶</span><span class="font12">处，我们定义了一个用户列表一</span><span class="font5">usernames</span><span class="font12">， 然后调用</span><span class="font5">greet_users()</span><span class="font12">，并将这个列表传递给它：</span></p>
<p><span class="font0">Hello, Hannah!</span></p>
<p><span class="font0">Hello, Ty!</span></p>
<p><span class="font0">Hello, Margot!</span></p>
<p><span class="font12">输出完全符合预期，每位用户都看到了一条个性化的问候语。每当你要问候一组用户时，都 可调用这个函数。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font3">8.4.1</span><span class="font8"> 在函数中修改列表</span></p></li></ul>
<p><span class="font12">将列表传递给函数后，函数就可对其进行修改。在函数中对这个列表所做的任何修改都是永 久性的，这让你能够高效地处理大量的数据。</span></p>
<p><span class="font12">来看一家为用户提交的设计制作</span><span class="font13">3D</span><span class="font12">打印模型的公司。需要打印的设计存储在一个列表中， 打印后移到另一个列表中。下面是在不使用函数的情况下模拟这个过程的代码：</span></p>
</body>
</html>