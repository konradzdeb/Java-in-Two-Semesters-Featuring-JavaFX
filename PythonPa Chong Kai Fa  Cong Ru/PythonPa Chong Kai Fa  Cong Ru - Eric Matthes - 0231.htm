<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:11pt Arial, sans-serif; }
 .font3 { font:12pt Arial, sans-serif; }
 .font4 { font:14pt Arial, sans-serif; }
 .font5 { font:10pt Segoe UI, sans-serif; }
 .font6 { font:8pt SimHei, sans-serif; }
 .font7 { font:12pt SimHei, sans-serif; }
 .font8 { font:14pt SimHei, sans-serif; }
 .font9 { font:8pt SimSun, serif; }
 .font10 { font:10pt SimSun, serif; }
 .font11 { font:9pt Times New Roman, serif; }
 .font12 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font12">214</span></p>
<p><span class="font10">第</span><span class="font12">12</span><span class="font10">章 武装飞船</span></p><img src="PythonPa Chong Kai Fa  Cong Ru - Eric Matthes - 0231_files/PythonPa20Chong20Kai20Fa2020Cong20Ru20-20Eric20Matthes20-200231-1.jpg" alt="" style="width:300pt;height:206pt;">
<p><span class="font6">图</span><span class="font11">12-2 </span><span class="font6">游戏《外星人入侵》屏幕底部中央有一艘飞船</span></p>
<ul style="list-style:none;"><li><a name="caption1"></a>
<h5><a name="bookmark0"></a><span class="font4"><a name="bookmark1"></a>12.5 </span><span class="font8">重构：模块</span><span class="font2">game_functions</span></h5></li></ul>
<p><span class="font10">在大型项目中，经常需要在添加新代码前重构既有代码。重构旨在简化既有代码的结构，使 其更容易扩展。在本节中，我们将创建一个名为</span><span class="font5">game_functions</span><span class="font10">的新模块，它将存储大量让游戏 《外星人入侵》运行的函数。通过创建模块</span><span class="font5">game_functions</span><span class="font10">,可避免</span><span class="font12">alien_invasion.py</span><span class="font10">太长，并使 其逻辑更容易理解。</span></p>
<ul style="list-style:none;"><li>
<h5><a name="bookmark2"></a><span class="font3"><a name="bookmark3"></a>12.5.1</span><span class="font7"> 函数</span><span class="font2">check_events()</span></h5></li></ul>
<p><span class="font10">我们将首先把管理事件的代码移到一个名为</span><span class="font5">check_events()</span><span class="font10">的函数中，以简化</span><span class="font5">run_game()</span><span class="font10">并 隔离事件管理循环。通过隔离事件循环，可将事件管理与游戏的其他方面(如更新屏幕)分离。</span></p>
<p><span class="font10">将</span><span class="font5">check_events()</span><span class="font10">放在一个名为</span><span class="font5">game_functions</span><span class="font10">的模块中：</span></p>
<p><span class="font1">game_functions.py</span></p>
<p><span class="font0">import sys</span></p>
<p><span class="font0">import pygame</span></p>
<p><span class="font0">def check_events():</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font9">响应按键和鼠标事件</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font0">for event in pygame.event.get():</span></p>
<p><span class="font0">if event.type == pygame.QUIT: sys.exit()</span></p>
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
</body>
</html>