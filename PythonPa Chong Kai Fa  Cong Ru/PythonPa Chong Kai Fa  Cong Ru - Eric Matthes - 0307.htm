<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:11pt Arial, sans-serif; }
 .font3 { font:12pt Arial, sans-serif; }
 .font4 { font:10pt Segoe UI, sans-serif; }
 .font5 { font:7pt SimHei, sans-serif; }
 .font6 { font:8pt SimHei, sans-serif; }
 .font7 { font:10pt SimHei, sans-serif; }
 .font8 { font:12pt SimHei, sans-serif; }
 .font9 { font:7pt SimSun, serif; }
 .font10 { font:9pt SimSun, serif; }
 .font11 { font:10pt SimSun, serif; }
 .font12 { font:9pt Times New Roman, serif; }
 .font13 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font13">290</span></p>
<p><span class="font11">第</span><span class="font13">15</span><span class="font11">章 生成数据</span></p>
<p><span class="font11">现在</span><span class="font4">plot()</span><span class="font11">将正确地绘制数据，因为我们同时提供了输入值和输出值，它无需对输出值的生 成方式作出假设。最终的图形是正确的，如图</span><span class="font13">15-3</span><span class="font11">所示。</span></p>
<p><span class="font9">①n-e&gt; jo</span></p><img src="PythonPa Chong Kai Fa  Cong Ru - Eric Matthes - 0307_files/PythonPa20Chong20Kai20Fa2020Cong20Ru20-20Eric20Matthes20-200307-1.jpg" alt="" style="width:315pt;height:173pt;">
<p><span class="font6">图</span><span class="font12">15-3 </span><span class="font6">根据数据正确地绘制了图形</span></p>
<p><span class="font11">使用</span><span class="font4">plot()</span><span class="font11">时可指定各种实参，还可使用众多函数对图形进行定制。本章后面处理更有趣的 数据集时，将继续探索这些定制函数。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font3">15.2.3</span><span class="font8"> 使用</span><span class="font2">scatter</span><span class="font8">。绘制散点图并设置其样式</span></p></li></ul>
<p><span class="font11">有时候，需要绘制散点图并设置各个数据点的样式。例如，你可能想以一种颜色显示较小的 值，而用另一种颜色显示较大的值。绘制大型数据集时，你还可以对每个点都设置同样的样式， 再使用不同的样式选项重新绘制某些点，以突出它们。</span></p>
<p><span class="font11">要绘制单个点，可使用函数</span><span class="font4">scatter</span><span class="font11">。，并向它传递一对</span><span class="font13" style="font-style:italic;">x</span><span class="font11">和</span><span class="font13" style="font-style:italic;">y</span><span class="font11">坐标，它将在指定位置绘制一 个占.</span></p>
<p><span class="font7"><sup>：</sup></span></p>
<p><span class="font1">scatter_squares.py</span></p>
<p><span class="font0">import matplotlib.pyplot as plt</span></p>
<p><span class="font0">plt.scatter(2, 4)</span></p>
<p><span class="font0">plt.show()</span></p>
<p><span class="font11">下面来设置输出的样式，使其更有趣：添加标题，给轴加上标签，并确保所有文本都大到能 够看清：</span></p>
<p><span class="font0">import matplotlib.pyplot as plt</span></p>
<div>
</div><br clear="all">
<p><span class="font5">❶ </span><span class="font0">plt.scatter</span><span class="font10">(</span><span class="font0">2, 4, s=200</span><span class="font10">)</span></p>
</body>
</html>