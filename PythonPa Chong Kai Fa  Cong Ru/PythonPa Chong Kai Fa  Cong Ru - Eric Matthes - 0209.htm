<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:9pt Arial, sans-serif; }
 .font2 { font:10pt Segoe UI, sans-serif; }
 .font3 { font:10pt SimHei, sans-serif; }
 .font4 { font:12pt SimHei, sans-serif; }
 .font5 { font:8pt SimSun, serif; }
 .font6 { font:9pt SimSun, serif; }
 .font7 { font:10pt SimSun, serif; }
 .font8 { font:10pt Times New Roman, serif; }
 .font9 { font:11pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font8">192</span></p>
<p><span class="font7">第</span><span class="font8">11</span><span class="font7">章 测试代码</span></p>
<p><span class="font0">import unittest</span></p>
<p><span class="font0">from name_function import get_formatted_name</span></p>
<p><span class="font0">class NamesTestCase(unittest.TestCase):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font5">测试 </span><span class="font0">name_function.py &quot;&quot;&quot;</span></p>
<p><span class="font0">def test_first_last_name(self):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font5">能够正确地处理像</span><span class="font0">Janis Joplin</span><span class="font5">这样的姓名吗？</span><span class="font0">&quot;&quot;&quot; formatted_name = get_formatted_name('janis', 'joplin') self.assertEqual(formatted_name, 'Janis Joplin')</span></p>
<p><span class="font0">def test_first_last_middle_name(self):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font5">能够正确地处理像</span><span class="font0">Wolfgang Amadeus Mozart</span><span class="font5">这样的姓名吗？</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font1">❶ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">formatted_name = get_formatted_name(</span></p>
<p><span class="font0">'wolfgang', 'mozart', 'amadeus')</span></p>
<p><span class="font0">self.assertEqual(formatted_name, 'Wolfgang Amadeus Mozart')</span></p>
<p><span class="font0">unittest.main()</span></p>
<p><span class="font7">我们将这个方法命名为</span><span class="font2">test_first_last_middle_name()</span><span class="font7">。方法名必须以</span><span class="font8">test_</span><span class="font7">打头，这样它才 会在我们运行</span><span class="font8">test_name_fUnction.py</span><span class="font7">时自动运行。这个方法名清楚地指出了它测试的是</span><span class="font2">get_ formatted_name()</span><span class="font7">的哪个行为，这样，如果该测试未通过，我们就会马上知道受影响的是哪种类 型的姓名。在</span><span class="font2">TestCase</span><span class="font7">类中使用很长的方法名是可以的；这些方法的名称必须是描述性的，这才 能让你明白测试未通过时的输出；这些方法由</span><span class="font8">Python</span><span class="font7">自动调用，你根本不用编写调用它们的代码。</span></p>
<p><span class="font7">为测试函数</span><span class="font2">get_formatted_name()</span><span class="font7">，我们使用名、姓和中间名调用它(见</span><span class="font9" style="font-weight:bold;">❶</span><span class="font7">)，再使用 </span><span class="font2">assertEqual()</span><span class="font7">检查返回的姓名是否与预期的姓名(名、中间名和姓)一致。我们再次运行 </span><span class="font8">test_name_fUnction.py</span><span class="font7">时，两个测试都通过了：</span></p>
<p><span class="font0">Ran 2 tests in 0.000s</span></p>
<p><span class="font0">OK</span></p>
<p><span class="font7">太好了！现在我们知道，这个函数又能正确地处理像</span><span class="font8">Janis Joplin</span><span class="font7">这样的姓名了，我们还深信 它也能够正确地处理像</span><span class="font8">Wolfgang Amadeus Mozart</span><span class="font7">这样的姓名。</span></p>
<p><span class="font4">动手试一试</span></p>
<p><span class="font1">11-1</span><span class="font3">城市和国家</span><span class="font6">：编写一个函数，它接受两个形参：一个城市名和一个国家名。这 个函数返回一个格式为</span><span class="font2">City, Country</span><span class="font6">的字符串，如</span><span class="font2">Santiago, Chile</span><span class="font6">。将这个函数存储 在一个名为</span><span class="font8">city _fUnctions.py</span><span class="font6">的模块中。</span></p>
<p><span class="font6">创建一个名为</span><span class="font8">test_cities.py</span><span class="font6">的程序，对刚编写的函数进行测试(别忘了，你需要导 入模块</span><span class="font2">unittest</span><span class="font6">以及要测试的函数)。编写一个名为</span><span class="font2">test_city_country(/</span><span class="font1">q</span><span class="font6">方法，核实 </span></p>
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
</body>
</html>