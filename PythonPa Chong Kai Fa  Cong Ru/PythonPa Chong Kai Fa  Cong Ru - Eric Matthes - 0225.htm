<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:12pt Arial, sans-serif; }
 .font3 { font:10pt Segoe UI, sans-serif; }
 .font4 { font:7pt SimHei, sans-serif; }
 .font5 { font:10pt SimHei, sans-serif; }
 .font6 { font:12pt SimHei, sans-serif; }
 .font7 { font:8pt SimSun, serif; }
 .font8 { font:9pt SimSun, serif; }
 .font9 { font:10pt SimSun, serif; }
 .font10 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font10">208</span></p>
<p><span class="font9">第</span><span class="font10">12</span><span class="font9">章 武装飞船</span></p>
<ul style="list-style:none;"><li><a name="caption1"></a>
<h5><a name="bookmark0"></a><span class="font2"><a name="bookmark1"></a>12.3.1</span><span class="font6"> 创建</span><span class="font2">Pygame</span><span class="font6">窗口以及响应用户输入</span></h5></li></ul>
<p><span class="font9">首先，我们创建一个空的</span><span class="font10">Pygame</span><span class="font9">窗口。使用</span><span class="font10">Pygame</span><span class="font9">编写的游戏的基本结构如下: </span><span class="font1">alien_invasion.py</span></p>
<p><span class="font0">import sys</span></p>
<p><span class="font0">import pygame</span></p>
<p><span class="font0">def run_game():</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font7"> 初始化游戏并创建一个屏幕对象</span></p></li></ul>
<p><span class="font4">❶ &nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">pygame.init()</span></p>
<p><span class="font4">❷ &nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">screen = pygame.display.set_mode((12OO, 800</span><span class="font8">)</span><span class="font0">)</span></p>
<p><span class="font0">pygame.display.set_caption(&quot;Alien Invasion&quot;)</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font7"> 开始游戏的主循环</span></p></li></ul>
<p><span class="font4">❸ </span><span class="font0">while True:</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font7"> 监视键盘和鼠标事件</span></p></li></ul>
<p><span class="font4">❹ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">for event in pygame.event.get():</span></p>
<p><span class="font4">❺ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">if event.type == pygame.QUIT:</span></p>
<p><span class="font0">sys.exit()</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font7"> 让最近绘制的屏幕可见</span></p></li></ul>
<p><span class="font4">❻ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="font0">pygame.display.flip()</span></p>
<p><span class="font0">run_game()</span></p>
<p><span class="font9">首先，我们导入了模块</span><span class="font3">sys</span><span class="font9">和</span><span class="font3">pygame</span><span class="font9">。模块</span><span class="font3">pygame</span><span class="font9">包含开发游戏所需的功能。玩家退出时，我 们将使用模块</span><span class="font3">sys</span><span class="font9">来退出游戏。</span></p>
<p><span class="font9">游戏《外星人入侵》的开头是函数</span><span class="font3">run_game()</span><span class="font9">。</span><span class="font5">❶</span><span class="font9">处的代码行</span><span class="font3">pygame.init()</span><span class="font9">初始化背景设置， 让</span><span class="font10">Pygame</span><span class="font9">能够正确地工作。在</span><span class="font5">❷</span><span class="font9">处，我们调用</span><span class="font3">pygame.display.set_mode()</span><span class="font9">来创建一个名为</span><span class="font3">screen </span><span class="font9">的显示窗口，这个游戏的所有图形元素都将在其中绘制。实参</span><span class="font3">(1200, 800)</span><span class="font9">是一个元组，指定了 游戏窗口的尺寸。通过将这些尺寸值传递给</span><span class="font3">pygame.display.set_mode()</span><span class="font9">，我们创建了一个宽</span><span class="font10">1200 </span><span class="font9">像素、高</span><span class="font10">800</span><span class="font9">像素的游戏窗口(你可以根据自己的显示器尺寸调整这些值)。</span></p>
<p><span class="font9">对象</span><span class="font3">screen</span><span class="font9">是一个</span><span class="font10">suface</span><span class="font9">。在</span><span class="font10">Pygame</span><span class="font9">中，</span><span class="font10">suface</span><span class="font9">是屏幕的一部分，用于显示游戏元素。在这 个游戏中，每个元素(如外星人或飞船)都是一个</span><span class="font10">suface</span><span class="font9">。</span><span class="font3">display.set_mode()</span><span class="font9">返回的</span><span class="font10">suface</span><span class="font9">表 示整个游戏窗口。我们激活游戏的动画循环后，每经过一次循环都将自动重绘这个</span><span class="font10">suface</span><span class="font9">。</span></p>
<p><span class="font9">这个游戏由一个</span><span class="font3">while</span><span class="font9">循环(见</span><span class="font5">❸</span><span class="font9">)控制，其中包含一个事件循环以及管理屏幕更新的代码。 事件是用户玩游戏时执行的操作，如按键或移动鼠标。为让程序响应事件，我们编写一个事件循 环，以侦听事件，并根据发生的事件执行相应的任务。</span><span class="font5">❹</span><span class="font9">处的</span><span class="font3">for</span><span class="font9">循环就是一个事件循环。</span></p>
<p><span class="font9">为访问</span><span class="font10">Pygame</span><span class="font9">检测到的事件，我们使用方法</span><span class="font3">pygame.event.get()</span><span class="font9">。所有键盘和鼠标事件都将 促使</span><span class="font3">for</span><span class="font9">循环运行。在这个循环中，我们将编写一系列的</span><span class="font3">if</span><span class="font9">语句来检测并响应特定的事件。例如， 玩家单击游戏窗口的关闭按钮时，将检测到</span><span class="font3">pygame.QUIT</span><span class="font9">事件，而我们调用</span><span class="font3">sys.exit()</span><span class="font9">来退出游戏</span></p>
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
</body>
</html>