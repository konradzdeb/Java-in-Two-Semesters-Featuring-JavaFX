<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:12pt Arial, sans-serif; }
 .font3 { font:10pt Segoe UI, sans-serif; }
 .font4 { font:9pt SimSun, serif; }
 .font5 { font:10pt SimSun, serif; }
 .font6 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font6">10.1 </span><span class="font5">从文件中读取数据 </span><span class="font6">163</span></p>
<p><span class="font1">pi_digits.txt</span></p>
<p><span class="font0">3.1415926535</span></p>
<p><span class="font0">8979323846 2643383279</span></p>
<p><span class="font5">要动手尝试后续示例，可在编辑器中输入这些数据行，再将文件保存为</span><span class="font6">pi_digits.txt</span><span class="font5">,也可从 本书的配套网站(</span><a href="https://www.nostarch.com/pythoncrashcourse/)%e4%b8%8b%e8%bd%bd%e8%af%a5%e6%96%87%e4%bb%b6%e3%80%82%e7%84%b6%e5%90%8e%ef%bc%8c%e5%b0%86%e8%af%a5%e6%96%87%e4%bb%b6%e4%bf%9d"><span class="font6">https://www.nostarch.com/pythoncrashcourse/</span><span class="font5">)下载该文件。然后，将该文件保</span></a><span class="font5"> 存到本章程序所在的目录中。</span></p>
<p><span class="font5">下面的程序打开并读取这个文件，再将其内容显示到屏幕上：</span></p>
<p><span class="font1">file_reader.py</span></p>
<p><span class="font0">with open('pi_digits.txt') as file_object: contents = file_object.read() print(contents)</span></p>
<p><span class="font5">在这个程序中，第</span><span class="font6">1</span><span class="font5">行代码做了大量的工作。我们先来看看函数</span><span class="font3">open()</span><span class="font5">。要以任何方式使用 文件</span><span class="font6">——</span><span class="font5">哪怕仅仅是打印其内容，都得先</span><span class="font4">打开</span><span class="font5">文件，这样才能访问它。函数</span><span class="font3">open()</span><span class="font5">接受一个参数: 要打开的文件的名称。</span><span class="font6">Python</span><span class="font5">在当前执行的文件所在的目录中查找指定的文件。在这个示例中， 当前运行的是</span><span class="font6">file_reader.py</span><span class="font5">，因此</span><span class="font6">Python</span><span class="font5">在</span><span class="font6">file_reader.py</span><span class="font5">所在的目录中查找</span><span class="font6">pi_digits.txt</span><span class="font5">。函数</span><span class="font3">open() </span><span class="font5">返回一个表示文件的对象。在这里，</span><span class="font3">open('pi_digits.txt')</span><span class="font5">返回一个表示文件</span><span class="font3">pi_digits.txt</span><span class="font5">的对 象；</span><span class="font6">Python</span><span class="font5">将这个对象存储在我们将在后面使用的变量中。</span></p>
<div>
<p><span class="font2" style="font-weight:bold;">10</span></p>
</div><br clear="all">
<p><span class="font5">关键字</span><span class="font3">with</span><span class="font5">在不再需要访问文件后将其关闭。在这个程序中，注意到我们调用了</span><span class="font3">open()</span><span class="font5">，但 没有调用</span><span class="font3">close()</span><span class="font5">；你也可以调用</span><span class="font3">open()</span><span class="font5">和</span><span class="font3">close()</span><span class="font5">来打开和关闭文件，但这样做时，如果程序存 在</span><span class="font6">bug</span><span class="font5">，导致</span><span class="font3">close()</span><span class="font5">语句未执行，文件将不会关闭。这看似微不足道，但未妥善地关闭文件可能 会导致数据丢失或受损。如果在程序中过早地调用</span><span class="font3">close()</span><span class="font5">，你会发现需要使用文件时它已</span><span class="font4">关闭 </span><span class="font5">(无法访问)，这会导致更多的错误。并非在任何情况下都能轻松确定关闭文件的恰当时机，但通 过使用前面所示的结构，可让</span><span class="font6">Python</span><span class="font5">去确定：你只管打开文件，并在需要时使用它，</span><span class="font6">Python</span><span class="font5">自会 在合适的时候自动将其关闭。</span></p>
<p><span class="font5">有了表示</span><span class="font6">pi_digits.txt</span><span class="font5">的文件对象后，我们使用方法</span><span class="font3">read()</span><span class="font5">(前述程序的第</span><span class="font6">2</span><span class="font5">行)读取这个文 件的全部内容，并将其作为一个长长的字符串存储在变量</span><span class="font3">contents</span><span class="font5">中。这样，通过打印</span><span class="font3">contents </span><span class="font5">的值，就可将这个文本文件的全部内容显示出来：</span></p>
<p><span class="font0">3.1415926535</span></p>
<p><span class="font0">8979323846</span></p>
<p><span class="font0">2643383279</span></p>
<p><span class="font5">相比于原始文件，该输出唯一不同的地方是末尾多了一个空行。为何会多出这个空行呢？因 为</span><span class="font3">read()</span><span class="font5">到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行。要删 除多出来的空行，可在</span><span class="font3">print</span><span class="font5">语句中使用</span><span class="font3">rstrip()</span><span class="font5">：</span></p>
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
</body>
</html>