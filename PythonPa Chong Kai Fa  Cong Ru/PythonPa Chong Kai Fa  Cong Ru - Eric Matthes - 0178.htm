<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:12pt Arial, sans-serif; }
 .font1 { font:14pt Arial, sans-serif; }
 .font2 { font:10pt Segoe UI, sans-serif; }
 .font3 { font:14pt SimHei, sans-serif; }
 .font4 { font:9pt SimSun, serif; }
 .font5 { font:10pt SimSun, serif; }
 .font6 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font6">9.7 </span><span class="font5">小结</span></p>
<p><span class="font6">161</span></p>
<ul style="list-style:none;"><li><a name="caption1"></a>
<h5><a name="bookmark0"></a><span class="font1"><a name="bookmark1"></a>9.6</span><span class="font3"> 类编码风格</span></h5></li></ul>
<p><span class="font5">你必须熟悉有些与类相关的编码风格问题，在你编写的程序较复杂时尤其如此。</span></p>
<p><span class="font5">类名应采用</span><span class="font4">驼峰命名法</span><span class="font5">，即将类名中的每个单词的首字母都大写，而不使用下划线。实例名 和模块名都采用小写格式，并在单词之间加上下划线。</span></p>
<p><span class="font5">对于每个类，都应紧跟在类定义后面包含一个文档字符串。这种文档字符串简要地描述类的 功能，并遵循编写函数的文档字符串时采用的格式约定。每个模块也都应包含一个文档字符串， 对其中的类可用于做什么进行描述。</span></p>
<p><span class="font5">可使用空行来组织代码，但不要滥用。在类中，可使用一个空行来分隔方法；而在模块中， 可使用两个空行来分隔类。</span></p>
<p><span class="font5">需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的</span><span class="font2">import</span><span class="font5">语句，再 添加一个空行，然后编写导入你自己编写的模块的</span><span class="font2">import</span><span class="font5">语句。在包含多条</span><span class="font2">import</span><span class="font5">语句的程序中， 这种做法让人更容易明白程序使用的各个模块都来自何方。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font1">9.7</span><span class="font3"> 小结</span></p></li></ul>
<p><span class="font5">在本章中，你学习了：如何编写类；如何使用属性在类中存储信息，以及如何编写方法，以 让类具备所需的行为；如何编写方法</span><span class="font2">__init__()</span><span class="font5">，以便根据类创建包含所需属性的实例。你见识 了如何修改实例的属性</span><span class="font6">——</span><span class="font5">包括直接修改以及通过方法进行修改。你还了解了：使用继承可简化 相关类的创建工作；将一个类的实例用作另一个类的属性可让类更简洁。</span></p>
<p><span class="font5">你了解到，通过将类存储在模块中，并在需要使用这些类的文件中导入它们，可让项目组织 有序。你学习了</span><span class="font6">Python</span><span class="font5">标准库，并见识了一个使用模块</span><span class="font2">collections</span><span class="font5">中的</span><span class="font2">OrderedDict</span><span class="font5">类的示例。 最后，你学习了编写类时应遵循的</span><span class="font6">Python</span><span class="font5">约定。</span></p>
<p><span class="font5">在第</span><span class="font6">10</span><span class="font5">章中，你将学习如何使用文件，这让你能够保存你在程序中所做的工作，以及你让用户 做的工作。你还将学习</span><span class="font4">异常</span><span class="font5">，这是一种特殊的</span><span class="font6">Python</span><span class="font5">类，用于帮助你在发生错误时采取相应的措施。</span></p>
</body>
</html>