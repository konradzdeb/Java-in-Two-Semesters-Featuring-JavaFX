<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:9pt Arial, sans-serif; }
 .font2 { font:10pt Arial, sans-serif; }
 .font3 { font:12pt Arial, sans-serif; }
 .font4 { font:10pt Consolas, monospace; }
 .font5 { font:10pt Segoe UI, sans-serif; }
 .font6 { font:10pt SimHei, sans-serif; }
 .font7 { font:12pt SimHei, sans-serif; }
 .font8 { font:10pt SimSun, serif; }
 .font9 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font9">9.4 </span><span class="font8">导入类 </span><span class="font9">157</span></p>
<ul style="list-style:none;"><li><a name="caption1"></a>
<h5><a name="bookmark0"></a><span class="font3"><a name="bookmark1"></a>9.4.4</span><span class="font7"> 导入整个模块</span></h5></li></ul>
<p><span class="font8">你还可以导入整个模块，再使用句点表示法访问需要的类。这种导入方法很简单，代码也易 于阅读。由于创建类实例的代码都包含模块名，因此不会与当前文件使用的任何名称发生冲突。</span></p>
<p><span class="font8">下面的代码导入整个</span><span class="font5">car</span><span class="font8">模块，并创建一辆普通汽车和一辆电动汽车：</span></p>
<p><span class="font2">my_cars.py</span></p>
<p><span class="font1">❶ </span><span class="font0">import car</span></p>
<p><span class="font1">❷</span><span class="font0">my_beetle = car.Car('volkswagen', 'beetle', 2016)</span></p>
<p><span class="font0">print(my_beetle.get_descriptive_name())</span></p>
<p><span class="font1">❸</span><span class="font0">my_tesla = car.ElectricCar('tesla', 'roadster', 2016)</span></p>
<p><span class="font0">print(my_tesla.get_descriptive_name())</span></p>
<p><span class="font8">在</span><span class="font6">。</span><span class="font8">处，我们导入了整个</span><span class="font5">car</span><span class="font8">模块。接下来，我们使用语法</span><span class="font4" style="font-style:italic;">/%7</span><span class="font8" style="font-style:italic;">邑〃</span><span class="font4" style="font-style:italic;">a/e.c/as“</span><span class="font8" style="font-style:italic;">〃</span><span class="font4" style="font-style:italic;">a/e</span><span class="font8">访问需要 的类。像前面一样，我们在</span><span class="font6">❷</span><span class="font8">处创建了一辆大众甲壳虫汽车，并在</span><span class="font6">❸</span><span class="font8">处创建了一辆特斯拉</span><span class="font9">Roadster </span><span class="font8">汽车。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font3">9.4.5</span><span class="font7"> 导入模块中的所有类</span></p></li></ul>
<p><span class="font8">要导入模块中的每个类，可使用下面的语法：</span></p>
<p><span class="font0">from </span><span class="font0" style="font-style:italic;">modul</span><span class="font0" style="font-style:italic;text-decoration:underline;">en</span><span class="font0" style="font-style:italic;">ame</span><span class="font0"> import *</span></p>
<p><span class="font8">不推荐使用这种导入方式，其原因有二。首先，如果只要看一下文件开头的</span><span class="font5">import</span><span class="font8">语句，就 能清楚地知道程序使用了哪些类，将大有裨益；但这种导入方式没有明确地指出你使用了模块中 的哪些类。这种导入方式还可能引发名称方面的困惑。如果你不小心导入了一个与程序文件中其 他东西同名的类，将引发难以诊断的错误。这里之所以介绍这种导入方式，是因为虽然不推荐使 用这种方式，但你可能会在别人编写的代码中见到它。</span></p>
<p><span class="font8">需要从一个模块中导入很多类时，最好导入整个模块，并使用</span><span class="font8" style="font-style:italic;">，。</span><span class="font8">血</span><span class="font4" style="font-style:italic;">/2</span><span class="font8" style="font-style:italic;">〃</span><span class="font8">物</span><span class="font4" style="font-style:italic;">e.cjas“</span><span class="font8" style="font-style:italic;">〃</span><span class="font4" style="font-style:italic;">a</span><span class="font8">游语法 来访问类。这样做时，虽然文件开头并没有列出用到的所有类，但你清楚地知道在程序的哪些地 方使用了导入的模块；你还避免了导入模块中的每个类可能引发的名称冲突。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font3">9.4.6</span><span class="font7"> 在一个模块中导入另一个模块</span></p></li></ul>
<p><span class="font8">有时候，需要将类分散到多个模块中，以免模块太大，或在同一个模块中存储不相关的类。 将类存储在多个模块中时，你可能会发现一个模块中的类依赖于另一个模块中的类。在这种情况 下，可在前一个模块中导入必要的类。</span></p>
<p><span class="font8">例如，下面将</span><span class="font5">Car</span><span class="font8">类存储在一个模块中，并将</span><span class="font5">ElectricCar</span><span class="font8">和</span><span class="font5">Battery</span><span class="font8">类存储在另一个模块中。 我们将第二个模块命名为</span><span class="font5">electric_car.py</span><span class="font8">(这将覆盖前面创建的文件</span><span class="font9">electric_car.py</span><span class="font8">)，并将</span></p>
</body>
</html>