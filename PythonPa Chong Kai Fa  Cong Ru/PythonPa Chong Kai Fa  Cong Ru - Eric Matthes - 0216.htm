<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:12pt Arial, sans-serif; }
 .font1 { font:14pt Arial, sans-serif; }
 .font2 { font:10pt Segoe UI, sans-serif; }
 .font3 { font:14pt SimHei, sans-serif; }
 .font4 { font:10pt SimSun, serif; }
 .font5 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font5">11.3 </span><span class="font4">小结 </span><span class="font5">199</span></p>
<ul style="list-style:none;"><li>
<p><span class="font1">11.3 </span><span class="font3">小结</span></p></li></ul>
<p><span class="font4">在本章中，你学习了：如何使用模块</span><span class="font2">unittest</span><span class="font4">中的工具来为函数和类编写测试；如何编写继 承</span><span class="font2">unittest.TestCase</span><span class="font4">的类，以及如何编写测试方法，以核实函数和类的行为符合预期；如何使用 方法</span><span class="font2">setUp()</span><span class="font4">来根据类高效地创建实例并设置其属性，以便在类的所有测试方法中都可使用它们。</span></p>
<p><span class="font4">测试是很多初学者都不熟悉的主题。作为初学者，并非必须为你尝试的所有项目编写测试； 但参与工作量较大的项目时，你应对自己编写的函数和类的重要行为进行测试。这样你就能够更 加确定自己所做的工作不会破坏项目的其他部分，你就能够随心所欲地改进既有代码了。如果不 小心破坏了原来的功能，你马上就会知道，从而能够轻松地修复问题。相比于等到不满意的用户 报告</span><span class="font5">bug</span><span class="font4">后再采取措施，在测试未通过时采取措施要容易得多。</span></p>
<p><span class="font4">如果你在项目中包含了初步测试，其他程序员将更敬佩你，他们将能够更得心应手地尝试使 用你编写的代码，也更愿意与你合作开发项目。如果你要跟其他程序员开发的项目共享代码，就 必须证明你编写的代码通过了既有测试，通常还需要为你添加的新行为编写测试。</span></p>
<p><span class="font4">请通过多开展测试来熟悉代码测试过程。对于自己编写的函数和类，请编写针对其重要行为 的测试，但在项目早期，不要试图去编写全覆盖的测试用例，除非有充分的理由这样做。</span></p>
<p><span class="font0" style="font-weight:bold;">11</span></p>
</body>
</html>