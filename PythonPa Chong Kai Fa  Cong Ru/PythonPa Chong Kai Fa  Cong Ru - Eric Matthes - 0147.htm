<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:14pt Arial, sans-serif; }
 .font3 { font:10pt Segoe UI, sans-serif; }
 .font4 { font:14pt SimHei, sans-serif; }
 .font5 { font:8pt SimSun, serif; }
 .font6 { font:10pt SimSun, serif; }
 .font7 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font7">130 </span><span class="font6">第</span><span class="font7">8</span><span class="font6">章 函数</span></p>
<ul style="list-style:none;"><li><a name="caption1"></a>
<h5><a name="bookmark0"></a><span class="font2"><a name="bookmark1"></a>8.5 </span><span class="font4">传递任意数量的实参</span></h5></li></ul>
<p><span class="font6">有时候，你预先不知道函数需要接受多少个实参，好在</span><span class="font7">Python</span><span class="font6">允许函数从调用语句中收集任 意数量的实参。</span></p>
<p><span class="font6">例如，来看一个制作比萨的函数，它需要接受很多配料，但你无法预先确定顾客要多少种配 料。下面的函数只有一个形参</span><span class="font3">*toppings</span><span class="font6">，但不管调用语句提供了多少实参，这个形参都将它们 统统收入囊中：</span></p>
<p><span class="font1">pizza.py</span></p>
<p><span class="font0">def make_pizza(*toppings):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font5">打印顾客点的所有配料</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font0">print(toppings)</span></p>
<p><span class="font0">make_pizza('pepperoni')</span></p>
<p><span class="font0">make_pizza('mushrooms', 'green peppers', 'extra cheese')</span></p>
<p><span class="font6">形参名</span><span class="font3">*toppings</span><span class="font6">中的星号让</span><span class="font7">Python</span><span class="font6">创建一个名为</span><span class="font3">toppings</span><span class="font6">的空元组，并将收到的所有值都封 装到这个元组中。函数体内的</span><span class="font3">print</span><span class="font6">语句通过生成输出来证明</span><span class="font7">Python</span><span class="font6">能够处理使用一个值调用函 数的情形，也能处理使用三个值来调用函数的情形。它以类似的方式处理不同的调用，注意， </span><span class="font7">Python</span><span class="font6">将实参封装到一个元组中，即便函数只收到一个值也如此：</span></p>
<p><span class="font0">('pepperoni',)</span></p>
<p><span class="font0">('mushrooms', 'green peppers', 'extra cheese')</span></p>
<h6><a name="bookmark2"></a><span class="font6"><a name="bookmark3"></a>现在，我们可以将这条</span><span class="font3">print</span><span class="font6">语句替换为一个循环，对配料列表进行遍历，并对顾客点的比 萨进行描述：</span></h6>
<p><span class="font0">def make_pizza(*toppings):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font5">概述要制作的比萨</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font0">print(&quot;\nMaking a pizza with the following toppings:&quot;)</span></p>
<p><span class="font0">for topping in toppings:</span></p>
<p><span class="font0">print(&quot;- &quot;&nbsp;+ topping)</span></p>
<p><span class="font0">make_pizza('pepperoni')</span></p>
<p><span class="font0">make_pizza('mushrooms', 'green peppers', 'extra cheese')</span></p>
<h6><a name="bookmark4"></a><span class="font6"><a name="bookmark5"></a>不管收到的是一个值还是三个值，这个函数都能妥善地处理：</span></h6>
<p><span class="font0">Making a pizza with the following toppings: - pepperoni</span></p>
<p><span class="font0">Making a pizza with the following toppings: - mushrooms</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">- green peppers</span></p></li>
<li>
<p><span class="font0">- extra cheese</span></p></li></ul>
<p><span class="font6">不管函数收到的实参是多少个，这种语法都管用。</span></p>
</body>
</html>