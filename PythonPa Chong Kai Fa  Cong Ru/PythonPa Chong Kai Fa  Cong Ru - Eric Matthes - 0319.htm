<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:12pt Arial, sans-serif; }
 .font3 { font:8pt SimHei, sans-serif; }
 .font4 { font:12pt SimHei, sans-serif; }
 .font5 { font:8pt SimSun, serif; }
 .font6 { font:10pt SimSun, serif; }
 .font7 { font:9pt Times New Roman, serif; }
 .font8 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font8">302</span></p>
<p><span class="font6">第</span><span class="font8">15</span><span class="font6">章 生成数据</span></p>
<p><span class="font0">plt.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, edgecolor='none', s=1)</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">--</span><span class="font0" style="font-style:italic;">snip</span><span class="font0">--</span></p></li></ul>
<p><span class="font6">这个示例模拟了一次包含</span><span class="font8">50 000</span><span class="font6">个点的随机漫步(以模拟现实情况)，并将每个点的大小都 设置为</span><span class="font8">1</span><span class="font6">。最终的随机漫步图更纤细，犹如云朵，如图</span><span class="font8">15-10</span><span class="font6">所示。正如你看到的，我们使用简单 的散点图制作出了一件艺术品！</span></p>
<p><span class="font6">请尝试修改上述代码，看看将漫步包含的点数增加到多少后，程序的运行速度变得极其缓慢 或绘制出的图形变得很难看。</span></p><img src="PythonPa Chong Kai Fa  Cong Ru - Eric Matthes - 0319_files/PythonPa20Chong20Kai20Fa2020Cong20Ru20-20Eric20Matthes20-200319-1.jpg" alt="" style="width:311pt;height:200pt;">
<p><span class="font3">图</span><span class="font7">15-10 </span><span class="font3">包含</span><span class="font7">50 000</span><span class="font3">个点的随机漫步</span></p>
<ul style="list-style:none;"><li>
<p><span class="font2">15.3.10 </span><span class="font4">调整尺寸以适合屏幕</span></p></li></ul>
<p><span class="font6">图表适合屏幕大小时，更能有效地将数据中的规律呈现出来。为让绘图窗口更适合屏幕大小， 可像下面这样调整</span><span class="font8">matplotlib</span><span class="font6">输出的尺寸：</span></p>
<p><span class="font1">rw_visual.py</span></p>
<p><span class="font0">--</span><span class="font0" style="font-style:italic;">snip</span><span class="font0">-</span></p>
<p><span class="font0">while True:</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font5"> 创建一个</span><span class="font0">RandomWalk</span><span class="font5">实例，并将其包含的点都绘制出来</span></p></li></ul>
<p><span class="font0">rw = RandomWalk()</span></p>
<p><span class="font0">rw.fill_walk()</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font5"> 设置绘图窗口的尺寸</span></p></li></ul>
<p><span class="font0">plt.figure(figsize=(10, 6))</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">- -</span><span class="font0" style="font-style:italic;">snip</span><span class="font0">--</span></p>
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all"></li></ul>
</body>
</html>