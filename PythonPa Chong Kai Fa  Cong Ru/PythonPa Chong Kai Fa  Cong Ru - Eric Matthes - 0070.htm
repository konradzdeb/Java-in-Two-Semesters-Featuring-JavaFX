<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:12pt Arial, sans-serif; }
 .font3 { font:10pt Segoe UI, sans-serif; }
 .font4 { font:10pt SimHei, sans-serif; }
 .font5 { font:12pt SimHei, sans-serif; }
 .font6 { font:9pt SimSun, serif; }
 .font7 { font:10pt SimSun, serif; }
 .font8 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font8">4.3 </span><span class="font7">创建数值列表 </span><span class="font8">53</span></p>
<p><span class="font0">print(squares)</span></p>
<p><span class="font4">。</span><span class="font7">处的代码与</span><span class="font8">squares.py</span><span class="font7">中</span><span class="font4">❸</span><span class="font7">处和</span><span class="font4">❹</span><span class="font7">处的代码等效。在循环中，计算每个值的平方，并立即将 结果附加到列表</span><span class="font3">squares</span><span class="font7">的末尾。</span></p>
<p><span class="font7">创建更复杂的列表时，可使用上述两种方法中的任何一种。有时候，使用临时变量会让代码 更易读；而在其他情况下，这样做只会让代码无谓地变长。你首先应该考虑的是，编写清晰易懂 且能完成所需功能的代码；等到审核代码时，再考虑采用更高效的方法。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font2">4.3.3</span><span class="font5"> 对数字列表执行简单的统计计算</span></p></li></ul>
<p><span class="font7">有几个专门用于处理数字列表的</span><span class="font8">Python</span><span class="font7">函数。例如，你可以轻松地找出数字列表的最大值、 最小值和总和：</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">&gt; &gt;&gt;&nbsp;</span><span class="font0" style="font-weight:bold;">digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]</span></p></li>
<li>
<p><span class="font0">&gt; &gt;&gt;&nbsp;</span><span class="font0" style="font-weight:bold;">min(digits)</span></p></li></ul>
<p><span class="font0">0</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">&gt; &gt;&gt;&nbsp;</span><span class="font0" style="font-weight:bold;">max(digits)</span></p></li></ul>
<p><span class="font0">9</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">&gt; &gt;&gt;&nbsp;</span><span class="font0" style="font-weight:bold;">sum(digits)</span></p></li></ul>
<p><span class="font0">45</span></p>
<p><span class="font7">注意 </span><span class="font6">出于版面考虑，本节使用的数字列表都很短，但这里介绍的知识也适用于包含数百万个 数字的列表。</span></p>
<ul style="list-style:none;"><li><a name="caption1"></a>
<h5><a name="bookmark0"></a><span class="font2"><a name="bookmark1"></a>4.3.4</span><span class="font5"> 列表解析</span></h5></li></ul>
<p><span class="font7">前面介绍的生成列表</span><span class="font3">squares</span><span class="font7">的方式包含三四行代码，而列表解析让你只需编写一行代码就 能生成这样的列表。</span><span class="font6">列表解析</span><span class="font7">将</span><span class="font3">for</span><span class="font7">循环和创建新元素的代码合并成一行，并自动附加新元素。 面向初学者的书籍并非都会介绍列表解析，这里之所以介绍列表解析，是因为等你开始阅读他人 编写的代码时，很可能会遇到它们。</span></p>
<p><span class="font7">下面的示例使用列表解析创建你在前面看到的平方数列表：</span></p>
<p><span class="font1">squares.py</span></p>
<p><span class="font0">squares = [value**2 for value in range(1,11)]</span></p>
<p><span class="font0">print(squares)</span></p>
<p><span class="font7">要使用这种语法，首先指定一个描述性的列表名，如</span><span class="font3">squares</span><span class="font7">；然后，指定一个左方括号， 并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为</span><span class="font3">value**2</span><span class="font7">,它计 算平方值。接下来，编写一个</span><span class="font3">for</span><span class="font7">循环，用于给表达式提供值，再加上右方括号。在这个示例中，</span></p>
</body>
</html>