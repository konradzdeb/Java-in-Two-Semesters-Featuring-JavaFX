<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:12pt Arial, sans-serif; }
 .font3 { font:10pt Segoe UI, sans-serif; }
 .font4 { font:7pt SimHei, sans-serif; }
 .font5 { font:10pt SimHei, sans-serif; }
 .font6 { font:12pt SimHei, sans-serif; }
 .font7 { font:8pt SimSun, serif; }
 .font8 { font:9pt SimSun, serif; }
 .font9 { font:10pt SimSun, serif; }
 .font10 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font10">340 </span><span class="font9">第</span><span class="font10">17</span><span class="font9">章使用</span><span class="font10">API</span></p>
<ul style="list-style:none;"><li><a name="caption1"></a>
<h5><a name="bookmark0"></a><span class="font2"><a name="bookmark1"></a>17.1.4</span><span class="font6"> 处理</span><span class="font2">API</span><span class="font6">响应</span></h5></li></ul>
<p><span class="font9">下面来编写一个程序，它执行</span><span class="font10">API</span><span class="font9">调用并处理结果，找出</span><span class="font10">GitHub</span><span class="font9">上星级最高的</span><span class="font10">Python</span><span class="font9">项目：</span></p>
<p><span class="font1">python_repos.py</span></p>
<p><span class="font4">❶ </span><span class="font0">import requests</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font7"> 执行</span><span class="font0">API</span><span class="font7">调用并存储响应</span></p></li></ul>
<p><span class="font4">❷ </span><span class="font0">url = '</span><a href="https://api.github.com/search/repositories?q=language:python&amp;sort=stars'"><span class="font0">https://api.github.com/search/repositories?q=language:python&amp;sort=stars'</span></a></p>
<p><span class="font4">❸ </span><span class="font0">r = requests.get(url)</span></p>
<p><span class="font4">❹ </span><span class="font0">print(&quot;Status code:&quot;, r.status_code)</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font7"> 将</span><span class="font0">API</span><span class="font7">响应存储在一个变量中</span></p></li></ul>
<p><span class="font4">❺ </span><span class="font0">response_dict = r.json()</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">#</span><span class="font7"> 处理结果</span></p></li></ul>
<p><span class="font0">print(response_dict.keys())</span></p>
<p><span class="font9">在</span><span class="font5">❶</span><span class="font9">处，我们导入了模块</span><span class="font3">requests</span><span class="font9">。在</span><span class="font5">❷</span><span class="font9">处，我们存储</span><span class="font10">API</span><span class="font9">调用的</span><span class="font10">URL</span><span class="font9">，然后使用</span><span class="font3">requests </span><span class="font9">来执行调用(见</span><span class="font5">❸</span><span class="font9">)。我们调用</span><span class="font3">get()</span><span class="font9">并将</span><span class="font10">URL</span><span class="font9">传递给它，再将响应对象存储在变量</span><span class="font3">r</span><span class="font9">中。响应对 象包含一个名为</span><span class="font3">status_code</span><span class="font9">的属性，它让我们知道请求是否成功了(状态码</span><span class="font10">200</span><span class="font9">表示请求成功)。 在</span><span class="font5">❹</span><span class="font9">处，我们打印</span><span class="font3">status_code</span><span class="font9">，核实调用是否成功了。</span></p>
<p><span class="font9">这个</span><span class="font10">API</span><span class="font9">返回</span><span class="font10">JSON</span><span class="font9">格式的信息，因此我们使用方法</span><span class="font3">json()</span><span class="font9">将这些信息转换为一个</span><span class="font10">Python</span><span class="font9">字典 (见</span><span class="font5">❺</span><span class="font9">)。我们将转换得到的字典存储在</span><span class="font3">response_dict</span><span class="font9">中。</span></p>
<p><span class="font9">最后，我们打印</span><span class="font3">response_dict</span><span class="font9">中的键。输出如下：</span></p>
<p><span class="font0">Status code: 200</span></p>
<p><span class="font0">dict_keys(['items', 'total_count', 'incomplete_results'])</span></p>
<p><span class="font9">状态码为</span><span class="font10">200</span><span class="font9">，因此我们知道请求成功了。响应字典只包含三个键：</span><span class="font3">‘items'</span><span class="font9">、</span><span class="font3">'total_count' </span><span class="font9">和</span><span class="font3">‘incomplete_results'</span><span class="font9">。</span></p>
<p><span class="font5">注意</span><span class="font8">像这样简单的调用应该会返回完整的结果集，因此完全可以忽略与</span><span class="font3">‘incomplete_results' </span><span class="font8">相关联的值。但执行更复杂的</span><span class="font10">API</span><span class="font8">调用时，程序应检查这个值。</span></p>
<ul style="list-style:none;"><li>
<h5><a name="bookmark2"></a><span class="font2"><a name="bookmark3"></a>17.1.5 </span><span class="font6">处理响应字典</span></h5></li></ul>
<p><span class="font9">将</span><span class="font10">API</span><span class="font9">调用返回的信息存储到字典中后，就可以处理这个字典中的数据了。下面来生成一些 概述这些信息的输出。这是一种不错的方式，可确认收到了期望的信息，进而可以开始研究感兴 趣的信息：</span></p>
<p><span class="font1">python_repos.py</span></p>
<p><span class="font0">import requests</span></p>
</body>
</html>