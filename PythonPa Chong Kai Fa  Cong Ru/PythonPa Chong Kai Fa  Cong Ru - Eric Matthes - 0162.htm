<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:12pt Arial, sans-serif; }
 .font3 { font:10pt Segoe UI, sans-serif; }
 .font4 { font:7pt SimHei, sans-serif; }
 .font5 { font:10pt SimHei, sans-serif; }
 .font6 { font:8pt SimSun, serif; }
 .font7 { font:9pt SimSun, serif; }
 .font8 { font:10pt SimSun, serif; }
 .font9 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font9">9.2 </span><span class="font8">使用类和实例</span></p>
<p><span class="font9">145</span></p>
<p><span class="font4">❶ </span><span class="font0">my_new_car.odometer_reading = 23</span></p>
<p><span class="font0">my_new_car.read_odometer()</span></p>
<p><span class="font8">在</span><span class="font5">❶</span><span class="font8">处，我们使用句点表示法来直接访问并设置汽车的属性</span><span class="font3">odometer_reading</span><span class="font8">。这行代码让 </span><span class="font9">Python</span><span class="font8">在实例</span><span class="font3">my_new_car</span><span class="font8">中找到属性</span><span class="font3">odometer_reading</span><span class="font8">,并将该属性的值设置为</span><span class="font9">23</span><span class="font8">:</span></p>
<p><span class="font0">2016 Audi A4</span></p>
<p><span class="font0">This car has 23 miles on it.</span></p>
<p><span class="font8">有时候需要像这样直接访问属性，但其他时候需要编写对属性进行更新的方法。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font1">2.</span><span class="font8"> 通过方法修改属性的值</span></p></li></ul>
<p><span class="font8">如果有替你更新属性的方法，将大有裨益。这样，你就无需直接访问属性，而可将值传递给 一个方法，由它在内部进行更新。</span></p>
<p><span class="font8">下面的示例演示了一个名为</span><span class="font3">update_odometer()</span><span class="font8">的方法：</span></p>
<p><span class="font0">class Car():</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">--</span><span class="font0" style="font-style:italic;">snip</span><span class="font0">--</span></p></li></ul>
<p><span class="font4">❶ </span><span class="font0">def update_odometer(self, mileage):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font6">将里程表读数设置为指定的值</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font0">self.odometer_reading = mileage</span></p>
<p><span class="font0">my_new_car = Car('audi', 'a4', 2016)</span></p>
<p><span class="font0">print(my_new_car.get_descriptive_name())</span></p>
<p><span class="font4">❷ </span><span class="font0">my_new_car.</span><span class="font4">叩</span><span class="font0">date_odometer</span><span class="font7">(</span><span class="font0">23</span><span class="font7">)</span></p>
<p><span class="font0">my_new_car.read_odometer()</span></p>
<p><span class="font8">对</span><span class="font3">Car</span><span class="font8">类所做的唯一修改是在</span><span class="font5">❶</span><span class="font8">处添加了方法</span><span class="font3">update_odometer()</span><span class="font8">。这个方法接受一个里程值， 并将其存储到</span><span class="font3">self.odometer_reading</span><span class="font8">中。在</span><span class="font5">❷</span><span class="font8">处，我们调用了</span><span class="font3">update_odometer()</span><span class="font8">，并向它提供了 实参</span><span class="font9">23</span><span class="font8">(该实参对应于方法定义中的形参</span><span class="font3">mileage</span><span class="font8">)。它将里程表读数设置为</span><span class="font9">23 </span><span class="font8">；而方法 </span><span class="font3">read_odometer()</span><span class="font8">打印该读数：</span></p>
<p><span class="font0">2016 Audi A4</span></p>
<p><span class="font0">This car has 23 miles on it.</span></p>
<p><span class="font8">可对方法</span><span class="font3">update_odometer()</span><span class="font8">进行扩展，使其在修改里程表读数时做些额外的工作。下面来添 加一些逻辑，禁止任何人将里程表读数往回调：</span></p>
<p><span class="font0">class Car():</span></p>
<ul style="list-style:none;"><li>
<p><span class="font0">--</span><span class="font0" style="font-style:italic;">snip</span><span class="font0">-</span></p></li></ul>
<p><span class="font0">def update_odometer(self, mileage):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font6">将里程表读数设置为指定的值</span></p>
<p><span class="font6">禁止将里程表读数往回调</span></p>
<div>
</div><br clear="all">
</body>
</html>