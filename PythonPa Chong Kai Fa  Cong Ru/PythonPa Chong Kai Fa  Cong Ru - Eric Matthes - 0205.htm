<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:12pt Arial, sans-serif; }
 .font2 { font:10pt Segoe UI, sans-serif; }
 .font3 { font:10pt SimHei, sans-serif; }
 .font4 { font:12pt SimHei, sans-serif; }
 .font5 { font:9pt SimSun, serif; }
 .font6 { font:10pt SimSun, serif; }
 .font7 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font7">188</span></p>
<p><span class="font6">第</span><span class="font7">11</span><span class="font6">章 测试代码</span></p>
<p><span class="font0">print(&quot;Enter 'q' at any time to quit.&quot;)</span></p>
<p><span class="font0">while True:</span></p>
<p><span class="font0">first = input(&quot;\nPlease give me a first name: &quot;)</span></p>
<p><span class="font0">if first == 'q':</span></p>
<p><span class="font0">break</span></p>
<p><span class="font0">last = input(&quot;Please give me a last name: &quot;) if last == 'q': break</span></p>
<p><span class="font0">formatted_name = get_formatted_name(first, last)</span></p>
<p><span class="font0">print(&quot;\tNeatly formatted name: &quot;&nbsp;+ formatted_name + '.')</span></p>
<p><span class="font6">这个程序从</span><span class="font7">name_function.py</span><span class="font6">中导入</span><span class="font2">8</span><span class="font3">已｛_千</span><span class="font2">0</span><span class="font3">工巾</span><span class="font2">8</span><span class="font3">壮已</span><span class="font2">0_^</span><span class="font3">巾已()</span><span class="font6">。用户可输入一系列的名和姓，并 看到格式整洁的全名：</span></p>
<p><span class="font0">Enter 'q' at any time to quit.</span></p>
<p><span class="font0">Please give me a first name: </span><span class="font0" style="font-weight:bold;">janis</span></p>
<p><span class="font0">Please give me a last name: </span><span class="font0" style="font-weight:bold;">joplin</span></p>
<p><span class="font0">Neatly formatted name: Janis Joplin.</span></p>
<p><span class="font0">Please give me a first name: </span><span class="font0" style="font-weight:bold;">bob</span></p>
<p><span class="font0">Please give me a last name: </span><span class="font0" style="font-weight:bold;">dylan</span></p>
<p><span class="font0">Neatly formatted name: Bob Dylan.</span></p>
<p><span class="font0">Please give me a first name: </span><span class="font0" style="font-weight:bold;">q</span></p>
<p><span class="font6">从上述输出可知，合并得到的姓名正确无误。现在假设我们要修改</span><span class="font2">get_formatted_name()</span><span class="font6">, 使其还能够处理中间名。这样做时，我们要确保不破坏这个函数处理只有名和姓的姓名的方式。 为此，我们可以在每次修改</span><span class="font2">get_formatted_name()</span><span class="font6">后都进行测试：运行程序</span><span class="font7">names.py</span><span class="font6">，并输入像 </span><span class="font2">Janis Joplin</span><span class="font6">这样的姓名，但这太烦琐了。所幸</span><span class="font7">Python</span><span class="font6">提供了一种自动测试函数输出的高效方式。 倘若我们对</span><span class="font2">get_formatted_name()</span><span class="font6">进行自动测试，就能始终信心满满，确信给这个函数提供我们 测试过的姓名时，它都能正确地工作。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font1">11.1.1</span><span class="font4"> 单元测试和测试用例</span></p></li></ul>
<p><span class="font7">Python</span><span class="font6">标准库中的模块</span><span class="font2">unittest</span><span class="font6">提供了代码测试工具。</span><span class="font5">单元测试</span><span class="font6">用于核实函数的某个方面没 有问题；</span><span class="font5">测试用例</span><span class="font6">是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求。 良好的测试用例考虑到了函数可能收到的各种输入，包含针对所有这些情形的测试。</span><span class="font5">全覆盖式测 试</span><span class="font6">用例包含一整套单元测试，涵盖了各种可能的函数使用方式。对于大型项目，要实现全覆盖可 能很难。通常，最初只要针对代码的重要行为编写测试即可，等项目被广泛使用时再考虑全覆盖。</span></p>
<ul style="list-style:none;"><li><a name="caption1"></a>
<h5><a name="bookmark0"></a><span class="font1"><a name="bookmark1"></a>11.1.2</span><span class="font4"> 可通过的测试</span></h5></li></ul>
<p><span class="font6">创建测试用例的语法需要一段时间才能习惯，但测试用例创建后，再添加针对函数的单元测 试就很简单了。要为函数编写测试用例，可先导入模块</span><span class="font2">unittest</span><span class="font6">以及要测试的函数，再创建一个 </span></p>
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
<div>
</div><br clear="all">
</body>
</html>