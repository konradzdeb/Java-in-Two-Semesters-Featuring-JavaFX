<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:7pt Arial, sans-serif; }
 .font1 { font:8pt Arial, sans-serif; }
 .font2 { font:12pt Arial, sans-serif; }
 .font3 { font:14pt Arial, sans-serif; }
 .font4 { font:12pt SimHei, sans-serif; }
 .font5 { font:14pt SimHei, sans-serif; }
 .font6 { font:9pt SimSun, serif; }
 .font7 { font:10pt SimSun, serif; }
 .font8 { font:10pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font8">28 </span><span class="font7">第</span><span class="font8">2</span><span class="font7">章变量和简单数据类型</span></p>
<ul style="list-style:none;"><li>
<p><span class="font2">2.5.2</span><span class="font4"> 该编写什么样的注释</span></p></li></ul>
<p><span class="font7">编写注释的主要目的是阐述代码要做什么，以及是如何做的。在开发项目期间，你对各个部 分如何协同工作了如指掌，但过段时间后，有些细节你可能不记得了。当然，你总是可以通过研 究代码来确定各个部分的工作原理，但通过编写注释，以清晰的自然语言对解决方案进行概述， 可节省很多时间。</span></p>
<p><span class="font7">要成为专业程序员或与其他程序员合作，就必须编写有意义的注释。当前，大多数软件都是 合作编写的，编写者可能是同一家公司的多名员工，也可能是众多致力于同一个开源项目的人员。 训练有素的程序员都希望代码中包含注释，因此你最好从现在开始就在程序中添加描述性注释。 作为新手，最值得养成的习惯之一是，在代码中编写清晰、简洁的注释。</span></p>
<p><span class="font7">如果不确定是否要编写注释，就问问自己，找到合理的解决方案前，是否考虑了多个解决方 案。如果答案是肯定的，就编写注释对你的解决方案进行说明吧。相比回过头去再添加注释，删 除多余的注释要容易得多。从现在开始，本书的示例都将使用注释来阐述代码的工作原理。</span></p>
<p><span class="font4">动手试一试</span></p>
<p><span class="font8">2-10</span><span class="font7">添加注释：选择你编写的两个程序，在每个程序中都至少添加一条注释。如 果程序太简单，实在没有什么需要说明的，就在程序文件开头加上你的姓名和当前日期， 再用一句话阐述程序的功能。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font3">2.6 Python </span><span class="font5">之禅</span></p></li></ul>
<p><span class="font7">编程语言</span><span class="font8">Perl</span><span class="font7">曾在互联网领域长期占据着统治地位，早期的大多数交互式网站使用的都是 </span><span class="font8">Peil</span><span class="font7">脚本。彼时，”解决问题的办法有多个“被</span><span class="font8">Perl</span><span class="font7">社区奉为座右铭。这种理念一度深受大家的喜 爱，因为这种语言固有的灵活性使得大多数问题都有很多不同的解决之道。在开发项目期间，这 种灵活性是可以接受的，但大家最终认识到，过于强调灵活性会导致大型项目难以维护：要通过 研究代码搞清楚当时解决复杂问题的人是怎么想的，既困难又麻烦，还会耗费大量的时间。</span></p>
<p><span class="font7">经验丰富的程序员倡导尽可能避繁就简。</span><span class="font8">Python</span><span class="font7">社区的理念都包含在</span><span class="font8">Tim Peters</span><span class="font7">撰写的 </span><span class="font8">“Python</span><span class="font7">之禅”中。要获悉这些有关编写优秀</span><span class="font8">Python</span><span class="font7">代码的指导原则，只需在解释器中执行命令 </span><span class="font8">import this<sub>o</sub></span><span class="font7">这里不打算赘述整个</span><span class="font8">“Python</span><span class="font7">之禅”，而只与大家分享其中的几条原则，让你明白 为何它们对</span><span class="font8">Pyth</span><span class="font7">。谪手来说至关重要。</span></p>
<p><span class="font1" style="font-weight:bold;">»&gt; import this</span></p>
<p><span class="font0" style="font-weight:bold;">The Zen of Python, by Tim Peters</span></p>
<p><span class="font0" style="font-weight:bold;">Beautiful is better than ugly.</span></p>
<p><span class="font6">图灵社区会员江子涛</span><span class="font8">Tesla(jiangzitao201314@foxmail.com)</span><span class="font6">专享尊重版权</span></p>
</body>
</html>