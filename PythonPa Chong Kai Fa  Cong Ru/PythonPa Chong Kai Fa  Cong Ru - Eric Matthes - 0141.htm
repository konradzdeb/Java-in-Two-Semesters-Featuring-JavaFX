<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ABBYY FineReader PDF 15">
<style type="text/css">
 table.main {}
 tr.row {}
 td.cell {}
 div.block {}
 div.paragraph {}
 .font0 { font:8pt Arial, sans-serif; }
 .font1 { font:10pt Arial, sans-serif; }
 .font2 { font:11pt Arial, sans-serif; }
 .font3 { font:12pt Arial, sans-serif; }
 .font4 { font:10pt Segoe UI, sans-serif; }
 .font5 { font:12pt SimHei, sans-serif; }
 .font6 { font:8pt SimSun, serif; }
 .font7 { font:10pt SimSun, serif; }
 .font8 { font:10pt Times New Roman, serif; }
 .font9 { font:11pt Times New Roman, serif; }

</style>
</head>
<body>
<p><span class="font8">124</span></p>
<p><span class="font7">第</span><span class="font8">8</span><span class="font7">章 函数</span></p><a name="caption1"></a>
<h6><a name="bookmark0"></a><span class="font7"><a name="bookmark1"></a>面的修改让你还能存储年龄：</span></h6>
<p><span class="font0">def build_person(first_name, last_name, age=''): &quot;&quot;&quot;</span><span class="font6">返回一个字典，其中包含有关一个人的信息</span><span class="font0">&quot;&quot;&quot; person = {'first': first_name, 'last': last_name} if age:</span></p>
<p><span class="font0">person['age'] = age</span></p>
<p><span class="font0">return person</span></p>
<p><span class="font0">musician = build_person('jimi', 'hendrix', age=27) print(musician)</span></p>
<p><span class="font7">在函数定义中，我们新增了一个可选形参</span><span class="font4">age</span><span class="font7">,并将其默认值设置为空字符串。如果函数调 用中包含这个形参的值，这个值将存储到字典中。在任何情况下，这个函数都会存储人的姓名， 但可对其进行修改，使其也存储有关人的其他信息。</span></p>
<ul style="list-style:none;"><li>
<p><span class="font3">8.3.4</span><span class="font5"> 结合使用函数和</span><span class="font2">while</span><span class="font5">循环</span></p></li></ul>
<p><span class="font7">可将函数同本书前面介绍的任何</span><span class="font8">Python</span><span class="font7">结构结合起来使用。例如，下面将结合使用函数 </span><span class="font4">get_formatted_name()</span><span class="font7">和</span><span class="font4">while</span><span class="font7">循环，以更正规的方式问候用户。下面尝试使用名和姓跟用户打 招呼：</span></p>
<h6><a name="bookmark2"></a><span class="font1"><a name="bookmark3"></a>greeter.py</span></h6>
<p><span class="font0">def get_formatted_name(first_name, last_name):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font6">返回整洁的姓名</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font0">full_name = first_name + ' ' + last_name</span></p>
<p><span class="font0">return full_name.title()</span></p>
<p><span class="font0"># </span><span class="font6">这是一个无限循环</span><span class="font0">!</span></p>
<p><span class="font0">while True:</span></p>
<p><span class="font0">0 print(&quot;\nPlease tell me your name:&quot;)</span></p>
<p><span class="font0">f_name = input(&quot;First name: &quot;)</span></p>
<p><span class="font0">l_name = input(&quot;Last name: &quot;)</span></p>
<p><span class="font0">formatted_name = get_formatted_name(f_name, l_name)</span></p>
<p><span class="font0">print(&quot;\nHello, &quot;&nbsp;+ formatted_name + &quot;!&quot;)</span></p>
<p><span class="font7">在这个示例中，我们使用的是</span><span class="font4">get_formatted_name()</span><span class="font7">的简单版本，不涉及中间名。其中的</span><span class="font4">while </span><span class="font7">循环让用户输入姓名：依次提示用户输入名和姓(见</span><span class="font9" style="font-weight:bold;">0</span><span class="font7">)。</span></p>
<p><span class="font7">但这个</span><span class="font4">while</span><span class="font7">循环存在一个问题：没有定义退出条件。请用户提供一系列输入时，该在什么 地方提供退出条件呢？我们要让用户能够尽可能容易地退出，因此每次提示用户输入时，都应提 供退出途径。每次提示用户输入时，都使用</span><span class="font4">break</span><span class="font7">语句提供了退出循环的简单途径：</span></p>
<p><span class="font0">def get_formatted_name(first_name, last_name):</span></p>
<p><span class="font0">&quot;&quot;&quot;</span><span class="font6">返回整洁的姓名</span><span class="font0">&quot;&quot;&quot;</span></p>
<p><span class="font0">fullname = first name + ' ' + last name</span></p>
</body>
</html>